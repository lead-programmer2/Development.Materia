<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Development.Materia</name>
    </assembly>
    <members>
        <member name="T:Development.Materia.ArchivingToolEnum">
            <summary>
            Supported archiving tools.
            </summary>
        </member>
        <member name="F:Development.Materia.ArchivingToolEnum.SevenZip">
            <summary>
             7Zip archiving application.
            </summary>
        </member>
        <member name="F:Development.Materia.ArchivingToolEnum.WinRar">
            <summary>
            WinRar archiving application.
            </summary>
        </member>
        <member name="T:Development.Materia.ArchivingMethodEnum">
            <summary>
            Archiving methods.
            </summary>
        </member>
        <member name="F:Development.Materia.ArchivingMethodEnum.Insert">
            <summary>
            Insert : puts the whole specified file / directory in the archive file.
            </summary>
        </member>
        <member name="F:Development.Materia.ArchivingMethodEnum.Append">
            <summary>
            Append : puts a copy of specified file / directory inside the archive file.
            </summary>
        </member>
        <member name="T:Development.Materia.CommandExecution">
            <summary>
            Database command execution enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.CommandExecution.ExecuteNonQuery">
            <summary>
            Executes database updating command statements.
            </summary>
        </member>
        <member name="F:Development.Materia.CommandExecution.ExecuteReader">
            <summary>
            Executes record-retrieving command statements.
            </summary>
        </member>
        <member name="T:Development.Materia.ConnectionStringSection">
            <summary>
            Common database connection string parameter values sections.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.Driver">
            <summary>
            DRIVER part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.Server">
            <summary>
            SERVER part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.Database">
            <summary>
            DATABASE part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.UID">
            <summary>
            UID (User Id) part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.PWD">
            <summary>
            PWD (Password) part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.Port">
            <summary>
            PORT (Port Number) part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.Provider">
            <summary>
            Provider part of a connection string.
            </summary>
        </member>
        <member name="F:Development.Materia.ConnectionStringSection.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="T:Development.Materia.IndicatorPositionEnum">
            <summary>
            Required field marking's position within the controls bounds.
            </summary>
        </member>
        <member name="F:Development.Materia.IndicatorPositionEnum.LeftTop">
            <summary>
            Upper left corner of the control.
            </summary>
        </member>
        <member name="F:Development.Materia.IndicatorPositionEnum.RigthTop">
            <summary>
            Upper right corner of the control.
            </summary>
        </member>
        <member name="T:Development.Materia.MySqlDumpParameters">
            <summary>
            MySql dump parameter enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.AddDropDatabase">
            <summary>
            --add-drop-database
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.AddDropTable">
            <summary>
            --add-drop-table
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.AddLocks">
            <summary>
            --add-locks
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.AllDatabases">
            <summary>
             --all-databases
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.AllowKeywords">
            <summary>
            --allow-keywords
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Comments">
            <summary>
            --comments
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Compact">
            <summary>
            --compact
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Compress">
            <summary>
            --compress
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.CompleteInsert">
            <summary>
            --complete-insert
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.CreateOptions">
            <summary>
            --create-options
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.DelayedInsert">
            <summary>
            --delayed-insert
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.DeleteMasterLogs">
            <summary>
            --delete-master-logs
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.DisableKeys">
            <summary>
            --disable-keys
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.DumpDate">
            <summary>
            --dump-date
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.ExtendedInsert">
            <summary>
            --extended-insert
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.FlushLogs">
            <summary>
            --flush-logs
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.FlushPrivileges">
            <summary>
            --flush-privileges
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Force">
            <summary>
            --force
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.HexBlob">
            <summary>
            --hex-blob
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.InsertIgnore">
            <summary>
            --insert-ignore
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.LockAllTables">
            <summary>
            --lock-all-tables
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.LockTables">
            <summary>
            --lock-tables
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.NoAutoCommit">
            <summary>
            --no-auto-commit
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.NoCreateDb">
            <summary>
            --no-create-db
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.NoCreateInfo">
            <summary>
            --no-create-info
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.NoData">
            <summary>
            --no-data
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.NoSetNames">
            <summary>
            --no-set-names
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Opt">
            <summary>
            --opt
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.OrderByPrimary">
            <summary>
            -order-by-primary
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Quick">
            <summary>
            --quick
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.QuoteNames">
            <summary>
            --quote-names
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Routines">
            <summary>
            --routines
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SetCharset">
            <summary>
            --set-charset
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SingleTransaction">
            <summary>
            --single-transaction
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipAddDropTables">
            <summary>
            --skip-add-drop-tables
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipAddLocks">
            <summary>
            --skip-add-locks
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipComments">
            <summary>
            --skip-comments
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipDisableKeys">
            <summary>
            --skip-disable-keys
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipDumpDate">
            <summary>
            --skip-dump-date
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipOpt">
            <summary>
            --skip-opt
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipSetCharset">
            <summary>
            --skip-set-charset
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipTriggers">
            <summary>
            --skip-triggers
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.SkipTzUtc">
            <summary>
            --skip-tz-utc
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Tables">
            <summary>
            --tables
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Triggers">
            <summary>
            --triggers
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.TzUtc">
            <summary>
            --tz-utc
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Verbose">
            <summary>
            --verbose
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlDumpParameters.Version">
            <summary>
            --version
            </summary>
        </member>
        <member name="T:Development.Materia.MySqlParameters">
            <summary>
            MySql application parameter enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.AutoRehash">
            <summary>
            --auto-rehash
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Batch">
            <summary>
            --batch
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.ColumnNames">
            <summary>
            --column-names
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Comments">
            <summary>
            --comments
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Compress">
            <summary>
            --compress
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.DebugInfo">
            <summary>
            --debug-info
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Force">
            <summary>
            --force
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Help">
            <summary>
            --help
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Html">
            <summary>
            --html
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.IgnoreSpaces">
            <summary>
            --ignore-spaces
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.LineNumbers">
            <summary>
            --line-numbers
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NamedCommands">
            <summary>
            --named-commands
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NoAutoRehash">
            <summary>
            --no-auto-rehash
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NoBeep">
            <summary>
            --no-beep
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NoNamedCommands">
            <summary>
            --no-named-commands
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NoPager">
            <summary>
            --no-pager
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.NoTee">
            <summary>
            --no-tee
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.OneDatabase">
            <summary>
            --one-database
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Quick">
            <summary>
            --quick
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Raw">
            <summary>
            --raw
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Reconnect">
            <summary>
            --reconnect
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SafeUpdates">
            <summary>
            --safe-updates
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SecureAuth">
            <summary>
            --secure-auth
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.ShowWarnings">
            <summary>
            --show-warnings
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SigintIgnore">
            <summary>
            -sigint-ignore
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Silent">
            <summary>
            --silent
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SkipColumnNames">
            <summary>
            --skip-column-names
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SkipLineNumbers">
            <summary>
            --skip-line-numbers
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.SkipPager">
            <summary>
            --skip-pager
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Table">
            <summary>
            --table
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Unbuffered">
            <summary>
            --unbuffered
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Verbose">
            <summary>
            --verbose
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Version">
            <summary>
            --version
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Vertical">
            <summary>
            --vertical
            </summary>
        </member>
        <member name="F:Development.Materia.MySqlParameters.Wait">
            <summary>
            --wait
            </summary>
        </member>
        <member name="T:Development.Materia.QueResultDisposition">
            <summary>
            Que result disposition enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.QueResultDisposition.ResultOnly">
            <summary>
            Dispose the result only. 
            </summary>
        </member>
        <member name="F:Development.Materia.QueResultDisposition.WithAssociatedQue">
            <summary>
            Dispose associated Que object also.
            </summary>
        </member>
        <member name="T:Development.Materia.Materia">
            <summary>
            Commonly used shared methods.
            </summary>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Char,System.Char,System.Char)">
            <summary>
            Returns whether the current character is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Returns whether the current date is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Double,System.Double,System.Double)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Single,System.Single,System.Single)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Between(System.Int16,System.Int16,System.Int16)">
            <summary>
            Returns whether the current numeric value is within the specified scope of ranges.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="from">Starting range</param>
            <param name="to">Ending range</param>
            <returns>True if evaluated value exists between the given value ranges otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.CanConnect(System.Data.IDbConnection)">
            <summary>
            Test whether the specified database connection can establish a database connection or not.
            </summary>
            <param name="connection">Database connection object</param>
            <returns>True if a database connection can be establish using the specified System.Data.IDbConnection object otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ConnectionStringValue(System.String,Development.Materia.ConnectionStringSection)">
            <summary>
            Gets the connection string assigned value from the specified connection string section.
            </summary>
            <param name="connectionstring">Database connection string.</param>
            <param name="section">Database connection string section.</param>
            <returns>Value assigned in the specified database connection string section.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ConnectionStringValue(System.String,System.String)">
            <summary>
            Returns the connection string assigned value from the specified connection string section.
            </summary>
            <param name="connectionstring">Database connection string.</param>
            <param name="section">Database connection string section.</param>
            <returns>Value assigned in the specified database connection string section.</returns>
        </member>
        <member name="M:Development.Materia.Materia.CreateDataObjectMap(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a database object mapping session from a database table using the specified connection.
            </summary>
            <param name="connection">Database connection</param>
            <param name="tablename">Database table name.</param>
            <returns>Development.Materia.Database.DatabaseObjectMap object generated from the specified database table.</returns>
        </member>
        <member name="M:Development.Materia.Materia.CreateDataObjectMap(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Creates a database object mapping session from a database table using the specified connection.
            </summary>
            <param name="connection">Database connection</param>
            <param name="tablename">Database table name.</param>
            <param name="condition">Database filtering condition.</param>
            <returns>Development.Materia.Database.DatabaseObjectMap object generated from the specified database table.</returns>
        </member>
        <member name="M:Development.Materia.Materia.CreateDataObjectMap(System.Data.IDbConnection,System.String,System.String[])">
            <summary>
            Creates a database object mapping session from a database table using the specified connection.
            </summary>
            <param name="connection">Database connection</param>
            <param name="tablename">Database table name.</param>
            <param name="fieldnames">Database table field names to include.</param>
            <returns>Development.Materia.Database.DatabaseObjectMap object generated from the specified database table.</returns>
        </member>
        <member name="M:Development.Materia.Materia.CreateDataObjectMap(System.Data.IDbConnection,System.String,System.String,System.String[])">
            <summary>
            Creates a database object mapping session from a database table using the specified connection.
            </summary>
            <param name="connection">Database connection</param>
            <param name="tablename">Database table name.</param>
            <param name="condition">Database filtering condition.</param>
            <param name="fieldnames">Database table field names to include.</param>
            <returns>Development.Materia.Database.DatabaseObjectMap object generated from the specified database table.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Decrypt(System.String,System.String)">
            <summary>
            Gets the decrypted string value of the specified string using the specified encryption key as its pattern.
            </summary>
            <param name="value">Value to decrypt</param>
            <param name="key">Encryption key</param>
            <returns>Human-readable string from the specified encrypted text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            Gets the decrypted string value of the specified string using the specified encryption key as its pattern.
            </summary>
            <param name="value">Value to decrypt</param>
            <param name="key">Encryption key</param>
            <param name="usesimpledecryption">Use simple decryption or not</param>
            <returns>Human-readable string from the specified encrypted text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Decrypt(System.IO.FileInfo,System.String)">
            <summary>
            Gets the decrypted contents of the file using the supplied encryption key.
            </summary>
            <param name="file">File to decrypt</param>
            <param name="key">Encryption key</param>
            <returns>Human-readable string from the specified encrypted text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Decrypt(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Returns the decrypted contents of the file using the supplied encryption key.
            </summary>
            <param name="file">File to decrypt</param>
            <param name="key">Encryption key</param>
            <param name="usesimpledecryption">Use simple encryption or not</param>
            <returns>Human-readable string from the specified encrypted text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Encrypt(System.IO.FileInfo,System.String)">
            <summary>
            Gets whether the specified file's contents has been encrypted using the supplied encryption key pattern.
            </summary>
            <param name="file">File to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>True if file encryption has been successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Encrypt(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Gets whether the specified file's contents has been encrypted using the supplied encryption key pattern.
            </summary>
            <param name="file">File to encrypt</param>
            <param name="key">Encryption key</param>
            <param name="usesimpleencryption">Use simple decryption or not</param>
            <returns>True if file encryption has been successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Encrypt(System.String,System.String)">
            <summary>
            Gets the encrypted string value of the specified string using the specified encryption key as its pattern.
            </summary>
            <param name="value">Value to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>Encrypted string from the specified human-readable text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            Gets the encrypted string value of the specified string using the specified encryption key as its pattern.
            </summary>
            <param name="value">Value to encrypt</param>
            <param name="key">Encryption key</param>
            <param name="usesimpleencryption">Use simple decryption or not</param>
            <returns>Encrypted string from the specified human-readable text using the supplied key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Materia.EndProgress(System.Windows.Forms.Control)">
            <summary>
            End the progressing state of a specified progressbar object asynchronously.
            </summary>
            <param name="progressbar">Progress bar control to synchronize</param>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Byte,System.Byte[])">
            <summary>
            Determines whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Char,System.Char[])">
            <summary>
            Returns whether the current character value is existing within the list of reference character values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Decimal,System.Decimal[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Double,System.Double[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Single,System.Single[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Int32,System.Int32[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Int64,System.Int64[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.Int16,System.Int16[])">
            <summary>
            Returns whether the current numeric value is existing within the list of reference numeric values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.In(System.String,System.String[])">
            <summary>
            Returns whether the current text value is existing within the list of reference text values or not.
            </summary>
            <param name="value">Value to be evaluated</param>
            <param name="values">List of searched values</param>
            <returns>True if the specified value is within the supplied group of values otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.DataTable,System.String,System.String)">
            <summary>
            Returns the first row of a certain DataTable object's specified field using the supplied DataTable row filter and sorting expressions.
            </summary>
            <typeparam name="T">Expected data type to return</typeparam>
            <param name="table">DataTable object to get the value from</param>
            <param name="filter">DataTable filter expression</param>
            <param name="field">Field name from the DataTable's columns</param>
            <returns>Value of the specified table field in the first row of the table's resulset. Returns nothing if no rows were available.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.DataTable,System.String,System.String,``0)">
            <summary>
            Returns the first row of a certain DataTable object's specified field using the supplied DataTable row filter and sorting expressions.
            </summary>
            <typeparam name="T">Expected data type to return</typeparam>
            <param name="table">DataTable object to get the value from</param>
            <param name="filter">DataTable filter expression</param>
            <param name="field">Field name from the DataTable's columns</param>
            <param name="defaultvalue">Default value to return in case of failure or the returning value is DBNull or Nothing.</param>
            <returns>Value of the specified table field in the first row of the table's resulset. Returns nothing if no rows were available.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            Returns the first row of a certain DataTable object's specified field using the supplied DataTable row filter and sorting expressions.
            </summary>
            <typeparam name="T">Expected data type to return</typeparam>
            <param name="table">DataTable object to get the value from</param>
            <param name="filter">DataTable filter expression</param>
            <param name="sort">DataTable sort expression</param>
            <param name="field">Field name from the DataTable's columns</param>
            <returns>Value of the specified table field in the first row of the table's resulset. Returns nothing if no rows were available.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.DataTable,System.String,System.String,System.String,``0)">
            <summary>
            Returns the first row of a certain DataTable object's specified field using the supplied DataTable row filter and sorting expressions.
            </summary>
            <typeparam name="T">Expected data type to return</typeparam>
            <param name="table">DataTable object to get the value from</param>
            <param name="filter">DataTable filter expression</param>
            <param name="sort">DataTable sort expression</param>
            <param name="field">Field name from the DataTable's columns</param>
            <param name="defaultvalue">Default value to return in case of failure or the returning value is DBNull or Nothing.</param>
            <returns>Value of the specified table field in the first row of the table's resulset. Returns nothing if no rows were available.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connection">Database connection</param>
            <param name="sql">Sql command statement</param>
            <returns>Value based on the supplied command statement.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetValue``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connection">Database connection</param>
            <param name="sql">Sql command statement</param>
            <param name="defaultvalue">Default value in case record retrieval fails or no record has been found</param>
            <returns>Value based on the supplied command statement.</returns>
        </member>
        <member name="M:Development.Materia.Materia.IsEmail(System.String)">
            <summary>
            Validates whether the specified string is an email or not.
            </summary>
            <param name="value">String value to be evaluated</param>
            <returns>True if specified value is a valid email address otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.IsIPAddress(System.String)">
            <summary>
            Validates whether the specified string is a IP address.
            </summary>
            <param name="value">String value to be evaluated</param>
            <returns>True if the specified string value is a valid IPv4 IP address otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.IsURL(System.String)">
            <summary>
            Validates whether the specified string is a valid URL or not.
            </summary>
            <param name="value">String value to be evaluated</param>
            <returns>True if the specified string value is a valid URL otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadCountries(System.Windows.Forms.Control)">
            <summary>
            Loads list of countries into the specified control. 
            </summary>
            <param name="control">Control whose data source will be populated</param>
        </member>
        <member name="M:Development.Materia.Materia.LimitRows(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Gets number of rows from the specified table with specified row count limits.
            </summary>
            <param name="table">DataTable object to extract the data</param>
            <param name="starting">Starting record count</param>
            <param name="rows">Number of maximum rows to retrieve.</param>
            <returns>System.Data.DataTable object paginated.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.String,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.String,System.String,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
            <param name="displaymember">Display field name for the binding</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.String,System.String,System.String,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
            <param name="displaymember">Display field name for the binding</param>
            <param name="valuemember">Value field name for the binding</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.Data.IDbConnection,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statement</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statement</param>
            <param name="displaymember">Display field name for the binding</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Windows.Forms.Control,System.Data.IDbConnection,System.String,System.String,System.String)">
            <summary>
            Loads data into the specified bindable control.
            </summary>
            <param name="control">Control to be filled by data</param>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statement</param>
            <param name="displaymember">Display field name for the binding</param>
            <param name="valuemember">Value field name for the binding</param>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Data.DataTable,System.String,System.String)">
            <summary>
            Reloads the specified DataTable object with data using the supplied database connection and command information.
            </summary>
            <param name="table">DataTable object that will be filled by data</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
            <returns>System.Data.DataTable object generated from the database result set. Returns nothing if error has been encountered during result set retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Data.DataTable,System.Data.IDbConnection,System.String)">
            <summary>
            Reloads the specified DataTable object with data using the supplied database connection and command information.
            </summary>
            <param name="table">DataTable object that will be filled by data</param>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statement</param>
            <returns>System.Data.DataTable object generated from the database result set. Returns nothing if error has been encountered during result set retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Data.DataSet,System.String,System.String)">
            <summary>
            Reloads the specified DataSet object with data using the supplied database connection and command information.
            </summary>
            <param name="dataset">DataSet object that will be filled with data</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
            <returns>System.Data.DataSet object generated from the database result set(s). Returns nothing if error has been encountered during result set retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadData(System.Data.DataSet,System.Data.IDbConnection,System.String)">
            <summary>
            Reloads the specified DataSet object with data using the supplied database connection and command information.
            </summary>
            <param name="dataset">DataSet object that will be filled with data</param>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statement</param>
            <returns>System.Data.DataSet object generated from the database result set(s). Returns nothing if error has been encountered during result set retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadExcel(System.Data.DataTable,System.String)">
            <summary>
             Loads an excel sheet from the specified file into the specified DataTable object.
            </summary>
            <param name="table">DataTable object to be filled by data</param>
            <param name="filename">Excel filename</param>
            <returns>System.Data.DataTable retrieved from the specified Microsoft Excel document. Returns nothing if error has been encountered during data retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
             Loads an excel sheet from the specified file into the specified DataTable object.
            </summary>
            <param name="table">DataTable object to be filled by data</param>
            <param name="filename">Excel filename</param>
            <param name="sheetname">Excel spreadsheet</param>
            <returns>System.Data.DataTable retrieved from the specified Microsoft Excel document. Returns nothing if error has been encountered during data retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadExcel(System.Data.DataSet,System.String)">
            <summary>
            Loads excel sheets from the specified file into the specified DataSet object.
            </summary>
            <param name="dataset">DataSet object to be filled by data</param>
            <param name="filename">Excel filename</param>
            <returns>System.Data.DataSet retrieved from the specified Microsoft Excel document. Returns nothing if error has been encountered during data retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LoadExcel(System.Data.DataSet,System.String,System.String[])">
            <summary>
            Loads excel sheets from the specified file into the specified DataSet object.
            </summary>
            <param name="dataset">DataSet object to be filled by data</param>
            <param name="filename">Excel filename</param>
            <param name="sheetnames">Excel spreadsheets</param>
            <returns>System.Data.DataSet retrieved from the specified Microsoft Excel document. Returns nothing if error has been encountered during data retrieval.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ManageOnDispose(System.Windows.Forms.Form)">
            <summary>
            Releases all relative resources (including processes) of the whole application after the current form is disposed.
            </summary>
            <param name="form">Form to be associated with the disposal management routine</param>
        </member>
        <member name="M:Development.Materia.Materia.MarkAsEdited(System.Windows.Forms.Form)">
            <summary>
            Places a '*' character at the rightmost side of the specified form's caption indicating a value inside a form has been changed.
            </summary>
            <param name="form">Form to place a '*' character indicating a value field has been modified.</param>
        </member>
        <member name="M:Development.Materia.Materia.MySqlExec(System.IO.FileInfo,System.String)">
            <summary>
            Executes the specified file's sql statement contents into the specified MySQL database using the supplied database connection string.
            </summary>
            <param name="file">MySQL database dump file</param>
            <param name="connectionstring">MySql database connection string</param>
            <returns>Development.Materia.Database.MySqlResult object that corresponds the MySql application execution's result information.</returns>
        </member>
        <member name="M:Development.Materia.Materia.MySqlExec(System.IO.FileInfo,System.String,Development.Materia.Database.MySqlParameterCollection)">
            <summary>
            Executes the specified file's sql statement contents into the specified MySQL database using the supplied database connection string.
            </summary>
            <param name="file">MySQL database dump file</param>
            <param name="connectionstring">MySql database connection string</param>
            <param name="parameters">Additional MySql parameters</param>
            <returns>Development.Materia.Database.MySqlResult object that corresponds the MySql application execution's result information.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Read(System.IO.FileInfo)">
            <summary>
            Returns the specified file's contents.
            </summary>
            <param name="file">File to read to contents from</param>
            <returns>Contents of the specified file. Returns an empty string if error has been encountered during file-reading process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Replicate(System.Data.DataTable)">
            <summary>
            Creates an exact replica (schema and contents) of the specified DataTable object.
            </summary>
            <param name="table">Table to create a replica from.</param>
            <returns>System.Data.DataTable object with the exact schema and contents as the specified table.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Sets the display size of the specified image.
            </summary>
            <param name="image">Image to resize</param>
            <param name="width">Assigned width</param>
            <param name="height">Assigned height</param>
            <returns>Same as the specified System.Drawing.Image but ported into the supplied dimension.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ResizeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Sets the display size of the specified image.
            </summary>
            <param name="image">Image to resize</param>
            <param name="size">Size information</param>
            <returns>Same as the specified System.Drawing.Image but ported into the supplied dimension.</returns>
        </member>
        <member name="M:Development.Materia.Materia.RLTrim(System.String)">
            <summary>
            Returns a complete space trimmed representation of the specified value (combination of RTrim and String.Trim() functions).
            </summary>
            <param name="value">String value to be truncated</param>
            <returns>Complete white-space trimmed value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.SaveExcel(System.Data.DataTable,System.String)">
            <summary>
            Exports the specified DataSet into an MS Excel file and return the file's information if it is successfully generated.
            </summary>
            <param name="table">DataTable object to be exported</param>
            <param name="filename">Export path</param>
            <returns>System.IO.FileInfo object that corresponds to the derived Microsoft Excel file from the specified table. Returns nothing when an error has been encountered during data transformation process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.SaveExcel(System.Data.DataSet,System.String)">
            <summary>
            Exports the specified DataSet into an MS Excel file and return the file's information if it is successfully generated.
            </summary>
            <param name="dataset">DataSet object to be exported</param>
            <param name="filename">Export path</param>
            <returns>System.IO.FileInfo object that corresponds to the derived Microsoft Excel file from the specified data set. Returns nothing when an error has been encountered during data transformation process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.SetAsRequired(System.Windows.Forms.Control)">
            <summary>
            Sets the specified control marked as a required field placing an indicator in a certain area of the control.
            </summary>
            <param name="control">Control to be marked / unmarked</param>
        </member>
        <member name="M:Development.Materia.Materia.SetAsRequired(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the specified control marked as a required field placing an indicator in a certain area of the control.
            </summary>
            <param name="control">Control to be marked / unmarked</param>
            <param name="required">Determines whether control will marked or unmarked as required field</param>
        </member>
        <member name="M:Development.Materia.Materia.ToByteArray(System.IO.FileInfo)">
            <summary>
            Converts the specified file into its corresponding byte array representation.
            </summary>
            <param name="file">System.IO.FileInfo object to convert.</param>
            <returns>Byte array representation of the specified file object. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToByteArray(System.Drawing.Image)">
            <summary>
            Converts the specified image into its corresponding byte array representation.
            </summary>
            <param name="image">System.Drawing.Image object to convert.</param>
            <returns>Byte array representation of the specified image. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToByteArray(System.String)">
            <summary>
            Converts the specified hexadecimal string into uts corresponding byte array representation.
            </summary>
            <param name="hex">Hexadecimal string to convert</param>
            <returns>Byte array representation of the specified hexadecimal string. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToExportableTable(System.Data.DataTable)">
            <summary>
            Converts the specified DataTable object into a serializable table.
            </summary>
            <param name="table">System.Data.DataTable object to convert.</param>
            <returns>System.Data.DataTable that can be serialized; basically non-convertible fields (blob fields) were removed.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToFileObject(System.Byte[],System.String)">
            <summary>
            Converts the specified byte array into a file object with the specified extension name.
            </summary>
            <param name="bytes">Byte array to convert</param>
            <param name="extension">File extension</param>
            <returns>System.IO.FileInfo the associates the file object representation of the specified byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToFileObject(System.Byte[],System.String,System.String)">
            <summary>
            Converts the specified byte array into a file object with the specified extension name.
            </summary>
            <param name="bytes">Byte array to convert</param>
            <param name="extension">File extension</param>
            <param name="outputdirectory">Output directory for the exported file</param>
            <returns>System.IO.FileInfo the associates the file object representation of the specified byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToHexadecimalString(System.Byte[])">
            <summary>
            Returns the hexadecimal string representation of the specified byte array.
            </summary>
            <param name="bytes">Byte array to convert</param>
            <returns>Hexadecimal string representation of the specified byte array. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToHexadecimalString(System.IO.FileInfo)">
            <summary>
            Returns the hexadecimal string representation of the specified file.
            </summary>
            <param name="file">File to convert</param>
            <returns>Hexadecimal string representation of the specified file object. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToHexadecimalString(System.Drawing.Image)">
            <summary>
            Returns the hexadecimal string representation of the specified image.
            </summary>
            <param name="image">Image to convert</param>
            <returns>Hexadecimal string representation of the specified image. Returns nothing if an error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToImage(System.Byte[])">
            <summary>
            Returns the image representation of the specified byte array.
            </summary>
            <param name="bytes">Byte array to convert</param>
            <returns>System.Drawing.Image representation of the specified byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToProper(System.String)">
            <summary>
            Returns the proper case (first letter capitalized and small caps for the preceeding letters) representation of the specified string.
            </summary>
            <param name="value">String value to be transformed</param>
            <returns>Proper-cased form of the specified string value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlDDL(System.Data.DataTable)">
            <summary>
            Creates SQL DDL from the specified DataTable schema.
            </summary>
            <param name="table">System.Data.DataTable object to evaluate.</param>
            <returns>SQL DDL derived from the specified System.Data.DataTable.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlDDL(System.Data.DataSet)">
            <summary>
            Creates SQL DDL from the specified DataSet schema.
            </summary>
            <param name="dataset">System.Data.DataSet object to evaluate.</param>
            <returns>SQL DDL derived from the specified System.Data.DataSet.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Byte)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Byte,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.DateTime)">
            <summary>
            Converts date value to its SQL qualified date-string representation.
            </summary>
            <param name="value">Date value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.DateTime,System.Boolean)">
            <summary>
            Converts date value to its SQL qualified date-string representation.
            </summary>
            <param name="value">Date value to convert.</param>
            <param name="withhours">Determines if output string shall represent the time together with the date.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Decimal)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Decimal,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Double)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Single)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Single,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int32,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Double,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int64)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int64,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int16)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.Int16,System.Int32)">
            <summary>
            Converts numeric value at floating point to its SQL qualified string representation.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="decimalplaces">Number of decimal places.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.String)">
            <summary>
            Converts string value to its SQL qualified string representation.
            </summary>
            <param name="value">String value to convert.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.String,System.Boolean)">
            <summary>
            Converts string value to its SQL qualified string representation.
            </summary>
            <param name="value">String value to convert.</param>
            <param name="datatableexpression">Determines if output will be used as a DataTable / DataColumn expression qualified string.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSqlValidString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts string value to its SQL qualified string representation.
            </summary>
            <param name="value">String value to convert.</param>
            <param name="datatableexpression">Determines if output will be used as a DataTable / DataColumn expression qualified string.</param>
            <param name="trimmed">Determines whether to peform text carriage-return trimming before actual evaluation.</param>
            <returns>SQL-qualified string representation of the specified value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Byte)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Byte,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Decimal)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Decimal,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Double)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Double,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Single)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Single,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Int32)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Int32,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Int16)">
            <summary>
            Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToWords(System.Int16,System.String)">
            <summary>
             Returns the english-word representation of the specified value.
            </summary>
            <param name="value">Numeric value to convert.</param>
            <param name="currency">Suffixing currency.</param>
            <returns>English-word representation of the specified numeric value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WaitToFinish(System.IAsyncResult)">
            <summary>
            Synchronizes the specified IAsyncResult object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="result">IAsyncResult to synchronize</param>
        </member>
        <member name="M:Development.Materia.Materia.WaitToFinish(System.IAsyncResult,System.Object)">
            <summary>
            Synchronizes the specified IAsyncResult object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="result">IAsyncResult to synchronize</param>
            <param name="progressbar">Synchronization progress bar</param>
        </member>
        <member name="M:Development.Materia.Materia.WaitToFinish(System.Threading.Thread)">
            <summary>
            Synchronizes the specified Thread object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="thread">Thread to synchronize</param>
        </member>
        <member name="M:Development.Materia.Materia.WaitToFinish(System.Threading.Thread,System.Object)">
            <summary>
            Synchronizes the specified Thread object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="thread">Thread to synchronize</param>
            <param name="progressbar">Synchronization progress bar</param>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Byte,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Single,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Int32,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Int64,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Decimal,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WholePartDivision(System.Double,System.Int32)">
            <summary>
            Gets the whole part of a division mathematical operation using the specified divisor.
            </summary>
            <param name="value">Dividend</param>
            <param name="divisor">Divisor</param>
            <returns>Whole part value from division operation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Write(System.IO.FileInfo,System.String)">
            <summary>
            Returns whether specified value was written into the current file or not.
            </summary>
            <param name="file">Path</param>
            <param name="contents">Value to be written</param>
            <returns>System.IO.FileInfo object that corresponds the written file's information. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Write(System.IO.FileInfo,System.String,System.Boolean)">
            <summary>
            Returns whether specified value was written into the current file or not.
            </summary>
            <param name="file">Path</param>
            <param name="contents">Value to be written</param>
            <param name="append">Determines whether to overwrite existing file contents or not</param>
            <returns>System.IO.FileInfo object that corresponds the written file's information. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.AttachHandler(System.Object,System.String,System.Delegate)">
            <summary>
            Attaches event handler in a event with the specified name of the specified object. 
            </summary>
            <param name="owner">Object to attach the handler into</param>
            <param name="eventname">Object's event name</param>
            <param name="handler">Handler to attach</param>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Materia 01" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Materia 01" language="vbnet" />
            </example>
        </member>
        <member name="M:Development.Materia.Materia.ByteArrayToHexaDecimalString(System.Byte[])">
            <summary>
            Converts the given byte array to its hexadecimal string representation.
            </summary>
            <param name="bytes">Array of byte to be interpreted.</param>
            <returns>Hexadecimal string representation of the specified byte array object.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ByteArrayToFileObject(System.Byte[],System.String)">
            <summary>
            Converts the given byte array to its corresponding file with the specified file extension.
            </summary>
            <param name="bytes">Array of byte to be interpreted.</param>
            <param name="outputextension">Output file extension.</param>
            <returns>System.IO.FileInfo object that contains the information of the converted byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ByteArrayToFileObject(System.Byte[],System.String,System.String)">
            <summary>
            Converts the given byte array to its corresponding file with the specified file extension.
            </summary>
            <param name="bytes">Array of byte to be interpreted.</param>
            <param name="outputextension">Output file extension.</param>
            <param name="outputdirectory">The output directory for the specified file.</param>
            <returns>System.IO.FileInfo object that contains the information of the converted byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ByteArrayToImage(System.Byte[])">
            <summary>
            Converts the given blob byte array to its image representation.
            </summary>
            <param name="bytes">Array of byte to be interpreted.</param>
            <returns>System.Drawing.Image object converted from the specified byte array. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ClearContents(System.Object)">
            <summary>
            Clears each of the controls in the specified form or control (or specified control itself) text, items, and data sources.
            </summary>
            <param name="owner">Control, form or container to be iterated</param>
        </member>
        <member name="M:Development.Materia.Materia.EnableFields(System.Object)">
            <summary>
            Enables all input controls and button within the specified form, control or container.
            </summary>
            <param name="owner">Control, form or container to be iterated</param>
        </member>
        <member name="M:Development.Materia.Materia.EnableFields(System.Object,System.Boolean)">
            <summary>
            Enables or disables all input controls and button within the specified form, control or container.
            </summary>
            <param name="owner">Control, form or container to be iterated</param>
            <param name="enabled">Determines whether the controls will be disable or not</param>
        </member>
        <member name="M:Development.Materia.Materia.EventExists(System.Object,System.String)">
            <summary>
            Validates whether a certain event exists within an object's members or not.
            </summary>
            <param name="owner">Object to evaluate</param>
            <param name="eventname">Event name</param>
            <returns>True if event / member exists otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.FileObjectToByteArray(System.String)">
            <summary>
            Converts the file (in the given path) to its byte array representation.
            </summary>
            <param name="filename">File's full path.</param>
            <returns>Byte array representation of the specified file object. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.FileObjectToByteArray(System.IO.FileInfo)">
            <summary>
            Converts the file to its byte array representation.
            </summary>
            <param name="file">File to convert</param>
            <returns>Byte array representation of the specified file object. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.FileObjectToHexaDecimalString(System.String)">
            <summary>
            Converts the file (in the given path) to its hexadecimal string representation.
            </summary>
            <param name="filename">File's full path.</param>
            <returns>Hexadecimal string representation of the specified file object. Returns an empty string if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.FileObjectToHexaDecimalString(System.IO.FileInfo)">
            <summary>
            Converts the file to its hexadecimal string representation.
            </summary>
            <param name="file">File to convert</param>
            <returns>Hexadecimal string representation of the specified file object. Returns an empty string if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Filter(System.Data.DataTable,System.Object)">
            <summary>
            Filters the DataTable object's view finding relevant records matching the supplied searched value to all of the DataTable's columns except for the ones specified as excluded. 
            </summary>
            <param name="table">DataTable object to filter</param>
            <param name="value">Value to be searched</param>
        </member>
        <member name="M:Development.Materia.Materia.Filter(System.Data.DataTable,System.Object,System.String[])">
            <summary>
            Filters the DataTable object's view finding relevant records matching the supplied searched value to all of the DataTable's columns except for the ones specified as excluded. 
            </summary>
            <param name="table">DataTable object to filter</param>
            <param name="value">Value to be searched</param>
            <param name="excludedfields">Excluded fields to apply to search into</param>
        </member>
        <member name="M:Development.Materia.Materia.GetCurrentMacAddress">
            <summary>
            Gets the current workstation's MAC address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Development.Materia.Materia.GetCurrentIPAddress">
            <summary>
            Gets the current workstation's IP address.
            </summary>
            <returns>Returns IPv4 IP Address of the current workstation.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetDefaultValueByType``1">
            <summary>
            Gets a default value based on the specified data type.
            </summary>
            <typeparam name="T">Output and evaluated data type</typeparam>
            <returns>Suggested default value for the specified type.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetDefaultValueByType(System.Type)">
            <summary>
            Gets a default value based on the specified data type.
            </summary>
            <param name="type">Output and evaluated data type</param>
            <returns>Suggested default value for the specified type.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetEvent(System.Object,System.String)">
            <summary>
            Gets the event with the specified name from the specified owning object.
            </summary>
            <param name="owner">Object to evaluate that owns the specified event member.</param>
            <param name="eventname">Name of the event.</param>
            <returns>System.Reflection.EventInfo that associates the event member of the evaluated owner. Returns nothing if event is not existing in the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue(System.Object,System.String)">
            <summary>
             Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue(System.Object,System.String,System.Object)">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <param name="parameter">Method / function parameters</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue(System.Object,System.String,System.Object[])">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <param name="parameters">Method / function parameters</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue``1(System.Object,System.String)">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <typeparam name="T">Method's expected return type.</typeparam>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue``1(System.Object,System.String,System.Object)">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <typeparam name="T">Method's expected return type.</typeparam>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <param name="parameter">Method / function parameters</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue``1(System.Object,System.String,System.Object[])">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <typeparam name="T">Method's expected return type.</typeparam>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <param name="parameters">Method / function parameters</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetMethodValue``1(System.Object,System.String,System.Object[],``0)">
            <summary>
            Returns the returning value of the specified object's function / method based on the given name.
            </summary>
            <typeparam name="T">Method's expected return type.</typeparam>
            <param name="owner">Method owner</param>
            <param name="methodname">Method / function name</param>
            <param name="parameters">Method / function parameters</param>
            <param name="defaultvalue">Default value in case it returns a DBNull or Nothing.</param>
            <returns>Method's returning value.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue(System.Object,System.String)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns nothing if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameter">Property accessibility parameter</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns nothing if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue(System.Object,System.String,System.Object[])">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameters">Property accessibility parameters</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns nothing if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="defaultvalue">Default value to return when function evaluates no value</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String,System.Object[])">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameters">Property accessibility parameters</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String,System.Object[],``0)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameters">Property accessibility parameters</param>
            <param name="defaultvalue">Default value to return when function evaluates no value</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String[])">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertynames">Property names</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String[],System.Object[])">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertynames">Property names</param>
            <param name="parameters">Property accessibility parameters</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.GetPropertyValue``1(System.Object,System.String[],System.Object[],``0)">
            <summary>
            Returns the value of a certain object's property based on the given name.
            </summary>
            <typeparam name="T">Return type of the specified property.</typeparam>
            <param name="owner">Property owner</param>
            <param name="propertynames">Property names</param>
            <param name="parameters">Property accessibility parameters</param>
            <param name="defaultvalue">Default value to return when function evaluates no value</param>
            <returns>Object that corresponds the current value of the specified property of the evaluated owner. Returns suggested type default value if property is not existing within the owner's members.</returns>
        </member>
        <member name="M:Development.Materia.Materia.HexadecimalStringToByteArray(System.String)">
            <summary>
            Converts the specified hexadecimal string into its byte array representation.
            </summary>
            <param name="hex">Hexadecimal string to be interpreted</param>
            <returns>Byte array representation of the specified hexadecimal string. Returns nothing if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ImageToByteArray(System.Drawing.Image)">
            <summary>
            Converts the specified image to its bytes array representation.
            </summary>
            <param name="image">Image object to be interpreted</param>
            <returns>Byte array representation of the specified System.Drawing.Image object. Returns nothing if error has been encountered during the convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ImageToHexaDecimalString(System.Drawing.Image)">
            <summary>
            Converts the given image to its hexadecimal string representation
            </summary>
            <param name="image">Image object to be interpreted</param>
            <returns>Hexadecimal string representation of the specified System.Drawing.Image object. Returns a blank string if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.InvokeMethod(System.Object,System.String)">
            <summary>
            Invokes the specified method of the object thru its method name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method name</param>
        </member>
        <member name="M:Development.Materia.Materia.InvokeMethod(System.Object,System.String,System.Object)">
            <summary>
            Invokes the specified method of the object thru its method name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method name</param>
            <param name="parameter">Method accessing parameter</param>
        </member>
        <member name="M:Development.Materia.Materia.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the specified method of the object thru its method name.
            </summary>
            <param name="owner">Method owner</param>
            <param name="methodname">Method name</param>
            <param name="parameters">Method accessing parameters</param>
        </member>
        <member name="M:Development.Materia.Materia.Is64BitApplication">
            <summary>
            Determines whether the current hosted application is in x64 mode or not.
            </summary>
            <returns>True if current application was built as x64 application or it inherits an x64 environment otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Is64BitOperatingSystem">
            <summary>
            Determines whether the current hosted operating system is 64 bit or not.
            </summary>
            <returns>True if the current residing operating system is in 64 bit environment otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.IsNullOrNothing(System.Object)">
            <summary>
            Validates whether the specified value is equivalent to NULL or DBNull.Value.
            </summary>
            <param name="value">Value to evaluate</param>
            <returns>True if value is equivalent to NULL (Nothing) or DBNull.Value otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.LogError(System.Exception)">
            <summary>
            Log an error message into an error log file ([Current Directory]\error.log).
            </summary>
            <param name="error">Error encountered</param>
        </member>
        <member name="M:Development.Materia.Materia.LogError(System.Exception,System.String)">
            <summary>
            Log an error message into an error log file ([Current Directory]\error.log).
            </summary>
            <param name="error">Error encountered</param>
            <param name="remarks">Remarks</param>
        </member>
        <member name="M:Development.Materia.Materia.LogError(System.String)">
            <summary>
            Log an error message into an error log file ([Current Directory]\error.log).
            </summary>
            <param name="error">Error message</param>
        </member>
        <member name="M:Development.Materia.Materia.LogError(System.String,System.String)">
            <summary>
            Log an error message into an error log file ([Current Directory]\error.log).
            </summary>
            <param name="error">Error message</param>
            <param name="remarks">Remarks</param>
        </member>
        <member name="M:Development.Materia.Materia.MethodExists(System.Object,System.String)">
            <summary>
            Validates whether a certain method exists within an object's members or not.
            </summary>
            <param name="owner">Object to evaluate</param>
            <param name="methodname">Method name to find</param>
            <returns>True if a method with the specified name exists within the owner's members otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.PropertyExists(System.Object,System.String)">
            <summary>
            Returns whether a certain property exists within an object's members or not.
            </summary>
            <param name="owner">Object to evaluate</param>
            <param name="propertyname">Property name to find.</param>
            <returns>True if a property with the specified name exists within the owner's members otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ReadFile(System.String)">
            <summary>
            Reads file contents from the specified file.
            </summary>
            <param name="filename">Path of the file to read the contents from</param>
            <returns>Contents of the specified file. Returns an empty string if error has been encountered during file-reading process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ReadFile(System.IO.FileInfo)">
            <summary>
            Reads file contents from the specified file.
            </summary>
            <param name="file">File to read the contents from</param>
            <returns>Contents of the specified file. Returns an empty string if error has been encountered during file-reading process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Redraw(System.Windows.Forms.Control)">
            <summary>
            Repaints; basically invokes the EndUpdate method of the specified object.
            </summary>
            <param name="control">Control to repaint.</param>
        </member>
        <member name="M:Development.Materia.Materia.Redraw(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Repaints or unpaints an object; basically invokes the BeginUpdate or EndUpdate method of the specified object.
            </summary>
            <param name="control">Control to repaint or unpaint</param>
            <param name="repaint">Determines whether to repaint or not</param>
        </member>
        <member name="M:Development.Materia.Materia.RaiseEvent(System.Object,System.String,System.Object)">
            <summary>
            Raises the specified object's event thru the event's name.
            </summary>
            <param name="owner">Owner</param>
            <param name="eventname">Event name</param>
            <param name="arg">Event argument</param>
        </member>
        <member name="M:Development.Materia.Materia.RaiseEvent(System.Object,System.String,System.Object[])">
            <summary>
            Raises the specified object's event thru the event's name.
            </summary>
            <param name="owner">Owner</param>
            <param name="eventname">Event name</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:Development.Materia.Materia.RefreshAndManageCurrentProcess">
            <summary>
            Refreshes and force the release of the entire unmanaged resources of the current application's process.
            </summary>
        </member>
        <member name="M:Development.Materia.Materia.SetPropertyValue(System.Object,System.String)">
            <summary>
            Sets the property value of an specified object by specifying the property name
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
        </member>
        <member name="M:Development.Materia.Materia.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value of an specified object by specifying the property name
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="value">Value to assign</param>
        </member>
        <member name="M:Development.Materia.Materia.SetPropertyValue(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Sets the property value of an specified object by specifying the property name
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameter">Property accessing parameters</param>
            <param name="value">Value to assign</param>
        </member>
        <member name="M:Development.Materia.Materia.SetPropertyValue(System.Object,System.String,System.Object[],System.Object)">
            <summary>
            Sets the property value of an specified object by specifying the property name
            </summary>
            <param name="owner">Property owner</param>
            <param name="propertyname">Property name</param>
            <param name="parameters">Property accessing parameters</param>
            <param name="value">Value to assign</param>
        </member>
        <member name="M:Development.Materia.Materia.ToSafeValue``1(``0)">
            <summary>
            Parses the specified value to return its corresponding type-safe representation.
            </summary>
            <typeparam name="T">Output data type.</typeparam>
            <param name="value">Value to evaluate</param>
            <returns>Suggested default value for the specified evaluated object if it is currently not type-safe.</returns>
        </member>
        <member name="M:Development.Materia.Materia.ToSafeValue``1(``0,``0)">
            <summary>
            Parses the specified value to return its corresponding type-safe representation.
            </summary>
            <typeparam name="T">Output data type.</typeparam>
            <param name="value">Value to evaluate</param>
            <param name="defaultvalue">Default value to return just in case it is unsafe</param>
            <returns>Suggested default value for the specified evaluated object if it is currently not type-safe.</returns>
        </member>
        <member name="M:Development.Materia.Materia.TryChangeType``1(System.Object)">
            <summary>
            Works like TryCast function but this time supports assigned value types (ea. Integer, Decimal, Date and etc.).
            </summary>
            <typeparam name="T">Output data type</typeparam>
            <param name="expression">Expression to convert</param>
            <returns>The specified value represented into the specified output data type. Returns suggested value for the specified data type if error has been encountered during convertion process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``1(``0)">
            <summary>
            Encapsulates an array of object with the data type.
            </summary>
            <typeparam name="T">Output data type for array.</typeparam>
            <param name="arg">Value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``2(``0,``1)">
            <summary>
            Encapsulates an array of object with various data types.
            </summary>
            <typeparam name="T1">Output data type for 1st element of the array.</typeparam>
            <typeparam name="T2">Output data type for 2nd element of the array.</typeparam>
            <param name="arg1">1st value to be encapsulated in the array.</param>
            <param name="arg2">2nd value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``3(``0,``1,``2)">
            <summary>
            Encapsulates an array of object with various data types.
            </summary>
            <typeparam name="T1">Output data type for 1st element of the array.</typeparam>
            <typeparam name="T2">Output data type for 2nd element of the array.</typeparam>
            <typeparam name="T3">Output data type for 3rd element of the array.</typeparam>
            <param name="arg1">1st value to be encapsulated in the array.</param>
            <param name="arg2">2nd value to be encapsulated in the array.</param>
            <param name="arg3">3rd value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``4(``0,``1,``2,``3)">
            <summary>
            Encapsulates an array of object with various data types.
            </summary>
            <typeparam name="T1">Output data type for 1st element of the array.</typeparam>
            <typeparam name="T2">Output data type for 2nd element of the array.</typeparam>
            <typeparam name="T3">Output data type for 3rd element of the array.</typeparam>
            <typeparam name="T4">Output data type for 4th element of the array.</typeparam>
            <param name="arg1">1st value to be encapsulated in the array.</param>
            <param name="arg2">2nd value to be encapsulated in the array.</param>
            <param name="arg3">3rd value to be encapsulated in the array.</param>
            <param name="arg4">4th value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``5(``0,``1,``2,``3,``4)">
            <summary>
            Encapsulates an array of object with various data types.
            </summary>
            <typeparam name="T1">Output data type for 1st element of the array.</typeparam>
            <typeparam name="T2">Output data type for 2nd element of the array.</typeparam>
            <typeparam name="T3">Output data type for 3rd element of the array.</typeparam>
            <typeparam name="T4">Output data type for 4th element of the array.</typeparam>
            <typeparam name="T5">Output data type for 5th element of the array.</typeparam>
            <param name="arg1">1st value to be encapsulated in the array.</param>
            <param name="arg2">2nd value to be encapsulated in the array.</param>
            <param name="arg3">3rd value to be encapsulated in the array.</param>
            <param name="arg4">4th value to be encapsulated in the array.</param>
            <param name="arg5">5th value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Tuple``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Encapsulates an array of object with various data types.
            </summary>
            <typeparam name="T1">Output data type for 1st element of the array.</typeparam>
            <typeparam name="T2">Output data type for 2nd element of the array.</typeparam>
            <typeparam name="T3">Output data type for 3rd element of the array.</typeparam>
            <typeparam name="T4">Output data type for 4th element of the array.</typeparam>
            <typeparam name="T5">Output data type for 5th element of the array.</typeparam>
            <typeparam name="T6">Output data type for 6th element of the array.</typeparam>
            <param name="arg1">1st value to be encapsulated in the array.</param>
            <param name="arg2">2nd value to be encapsulated in the array.</param>
            <param name="arg3">3rd value to be encapsulated in the array.</param>
            <param name="arg4">4th value to be encapsulated in the array.</param>
            <param name="arg5">5th value to be encapsulated in the array.</param>
            <param name="arg6">6th value to be encapsulated in the array.</param>
            <returns>One-dimensional array containing the specified value(s).</returns>
        </member>
        <member name="M:Development.Materia.Materia.Valid(System.Object,System.Windows.Forms.Control,System.Boolean,System.String)">
            <summary>
            Validates whether condition was satisfied otherwise control specified will be highligthed (validator should be a DevComponents.DotNetBar.Validator.SuperValidator).
            </summary>
            <param name="validator">DevComponents.DotNetBar.Validator.SuperValidator to use as the control notifying object</param>
            <param name="control">Control to place a notifier with</param>
            <param name="condition">The true part of the satisfying condition to evaluate</param>
            <param name="notification">Notification message to be shown</param>
            <returns>True if condition has been met otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WriteToFile(System.String,System.String)">
            <summary>
            Writes the specified value into an specific file.
            </summary>
            <param name="filename">File path</param>
            <param name="contents">Value to be written</param>
            <returns>System.IO.FileInfo object that corresponds to the written file's information. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="M:Development.Materia.Materia.WriteToFile(System.String,System.String,System.Boolean)">
            <summary>
            Writes the specified value into an specific file.
            </summary>
            <param name="filename">File path</param>
            <param name="contents">Value to be written</param>
            <param name="append">Determines whether to overwrite the existing file's contents of not</param>
            <returns>System.IO.FileInfo object that corresponds to the written file's information. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="P:Development.Materia.Materia.ClearTextImage">
            <summary>
            Gets or sets the globally used clear search box image.
            </summary>
        </member>
        <member name="P:Development.Materia.Materia.CountryTable">
            <summary>
            Gets the list of countries and loads it in a System.Data.DataTable.
            </summary>
        </member>
        <member name="P:Development.Materia.Materia.PasswordCharacter">
            <summary>
            Gets the conventional elipsis '.' character usually used as password display replacement.
            </summary>
        </member>
        <member name="P:Development.Materia.Materia.TimeZoneTable">
            <summary>
            Gets the list of global time zonez and loads it in a System.Data.DataTable.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Database.DataBinder">
            <summary>
            Data-control binding component.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.#ctor">
            <summary>
            Creates a new instance of DataBinder.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnAfterBindingDataLoad(Development.Materia.Database.DataBinderLoadingEventArgs)">
            <summary>
            Raises the AfterBindingDataLoad event.
            </summary>
            <param name="e">Data that contains the binder's loading event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnAfterControlValidation(Development.Materia.Database.DataBinderValidationEventArgs)">
            <summary>
            Raises the AfterControlValidation event.
            </summary>
            <param name="e">Data that contains the binder's binded field validation event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnAfterDataLoad(System.EventArgs)">
            <summary>
            Raises the AfterDataLoad event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnAfterDataSave(Development.Materia.Database.DataBinderSavingEventArgs)">
            <summary>
            Raises the AfterDataSave event.
            </summary>
            <param name="e">Data that contains the binder's saving event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnAfterValidation(Development.Materia.Database.DataBinderValidationEventArgs)">
            <summary>
            Raises the AfterValidation event.
            </summary>
            <param name="e">Data that contains the binder's validation event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnBeforeBindingDataLoad(Development.Materia.Database.DataBinderLoadingEventArgs)">
            <summary>
            Raises the BeforeBindingDataLoad event.
            </summary>
            <param name="e">Data that contains the binder's loading event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnBeforeControlValidation(Development.Materia.Database.DataBinderValidationEventArgs)">
            <summary>
            Raises the BeforeControlValidation event.
            </summary>
            <param name="e">Data that contains the binder's validation event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnBeforeDataLoad(System.EventArgs)">
            <summary>
            Raises the BeforeDataLoad event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnBeforeDataSave(Development.Materia.Database.DataBinderSavingEventArgs)">
            <summary>
            Raises the BeforeDataSave event.
            </summary>
            <param name="e">Data that contains the binder's saving event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnBeforeValidation(Development.Materia.Database.DataBinderValidationEventArgs)">
            <summary>
            Raises the BeforeValidation event.
            </summary>
            <param name="e">Data that contains the binder's validation event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnDataGathering(System.EventArgs)">
            <summary>
            Raises the DataGathering event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnDataLoading(System.EventArgs)">
            <summary>
            Raises the DataLoading event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnDataSaveExecuting(Development.Materia.Database.DataBinderSavingEventArgs)">
            <summary>
            Raises the DataSaveExecuting event.
            </summary>
            <param name="e">Data that contains the binder's saving event information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnDataSaving(System.EventArgs)">
            <summary>
            Raises the DataSaving event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnDataValidating(System.EventArgs)">
            <summary>
            Raises the DataValidating event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnParentFormLoad(System.EventArgs)">
            <summary>
            Raises the ParentFormLoad event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.OnParentFormShown(System.EventArgs)">
            <summary>
            Raises the ParentFormShown event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.CanExtend(System.Object)">
            <summary>
            Returns whether the specified object is supported by the DataBinder or not.
            </summary>
            <param name="extendee">Object to evaluate</param>
            <returns>True if object is supported otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.GetFieldName(System.Windows.Forms.Control)">
            <summary>
            Determines the binded database field name into the specified control.
            </summary>
            <param name="control">Control to evaluate</param>
            <returns>Binded database field name associated into the control.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.MarkAsUpdated">
            <summary>
            Sets the binder to mark itself and the current hosted form as modified.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.RaiseSaveButtonClick">
            <summary>
            Raises the event handler attached into the currently assigned object in the SaveButton property.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.Reload">
            <summary>
            Loads all of then specified component's binding information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.Save">
            <summary>
            Saves the changes made to the binded data sources.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinder.SetFieldName(System.Windows.Forms.Control,System.String)">
            <summary>
            Determines the binded database field name into the specified control.
            </summary>
            <param name="control">Binded control</param>
            <param name="fieldname">Database field name to bind to control into</param>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.AfterBindingDataLoad">
            <summary>
            Occurs when data loading routines has been performed in a certain database binding information.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.AfterControlValidation">
            <summary>
            Occurs after validation routines has been performed to a binded control.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.AfterDataLoad">
            <summary>
            Occurs after all data loading routines in all database binding information has been performed.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.AfterDataSave">
            <summary>
            Occurs after data saving routines of the binder has been performed.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.AfterValidation">
            <summary>
            Occurs after all the binded controls already passed the validation routines.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.BeforeBindingDataLoad">
            <summary>
            Occurs before data loading routines for a certain database biding information executes.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.BeforeControlValidation">
            <summary>
            Occurs before a binded control is evaluated for entry validation.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.BeforeDataLoad">
            <summary>
            Occurs when data loading method has been invoked.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.BeforeDataSave">
            <summary>
            Occurs before data saving routines of the binder executes.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.BeforeValidation">
            <summary>
            Occurs before entry validation routines to all binded controls takes place.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.DataGathering">
            <summary>
            Occurs upon data gathering routines of the binder before the actual data saving events.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.DataLoading">
            <summary>
            Occurs upon data loading routines of the binder.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.DataSaveExecuting">
            <summary>
            Occurs before the actual data saving execution.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.DataSaving">
            <summary>
            Occurs upon data savingroutines of the binder.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.DataValidating">
            <summary>
            Occurs upon data validation routines before the actual data saving events occur.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.ParentFormLoad">
            <summary>
            Occurs when the component's hosted form invokes its Load event.
            </summary>
        </member>
        <member name="E:Development.Materia.Database.DataBinder.ParentFormShown">
            <summary>
            Occurs when the component's hosted form already performs all of its data binding routines after it is shown.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.BindedControls">
            <summary>
            Gets the list of binded controls.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.Binding">
            <summary>
            Gets the database binding information of the component.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.CancelRunningProcess">
            <summary>
            Gets or sets whether the currently running loading and / or data saving processes will be cancelled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.Connection">
            <summary>
            Gets or sets the database connection used to retrieve and save data from the binded controls and grids.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.ContainerControl">
            <summary>
            Gets or sets the container object to where the component is currently hosted into.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.HaveUpdates">
            <summary>
            Gets whether there was an update that occured to the currently binded data sources.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.OtherSupportedControls">
            <summary>
            Gets the list of other types of control the DataBinder is bound to support other than the default ones.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.SaveButton">
            <summary>
            Gets or sets the accosiated button to perform the record updating routines.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.Saving">
            <summary>
            Gets whether the binder is currently executing its data saving routines or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.Site">
            <summary>
             Gets or sets the component's site.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinder.ValidatorIcon">
            <summary>
            Gets or sets the icon that will be used by the binder's internal error validator.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataBinder.DataBinderLoadingEventHandler">
            <summary>
            Handler for DataBinder data-loading events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Development.Materia.Database.DataBinder.DataBinderSavingEventHandler">
            <summary>
            Handler for DataBinder data-saving events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Development.Materia.Database.DataBinder.DataBinderValidationEventHandler">
            <summary>
            Handler for DataBinder data-validation events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Development.Materia.Database.BindedControl">
            <summary>
            DataBinder binded control information class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.BindedControl.#ctor(Development.Materia.Database.BindedControlCollection,System.Object,System.String)">
            <summary>
            Creates a new instance of BindedControl.
            </summary>
            <param name="parent">Parent collection.</param>
            <param name="control">Binded control</param>
            <param name="field">Binded database field name.</param>
        </member>
        <member name="P:Development.Materia.Database.BindedControl.Control">
            <summary>
            Gets the currently binded control.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.BindedControl.FieldName">
            <summary>
            Gets the currently binded database field name into the current binded control.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.BindedControl.Parent">
            <summary>
            Gets the collection to where the binded control is parented into.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.BindedControlCollection">
            <summary>
             Collection of binded control information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.#ctor(Development.Materia.Database.DataBinder)">
            <summary>
            Creates a new instance of BindedControlCollection.
            </summary>
            <param name="binder">Development.Materia.Database.DataBinder parent control.</param>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Add(System.Object,System.String)">
            <summary>
            Adds a new binded control information into the collection.
            </summary>
            <param name="control">Binded control object</param>
            <param name="field">Database field name to bind into the control</param>
            <returns>Newly added Development.Materia.Database.BindedControl</returns>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Contains(Development.Materia.Database.BindedControl)">
            <summary>
            Returns whether the specified binded control information already exists within the collection or not.
            </summary>
            <param name="control">Development.Materia.Database.BindedControl to evaluate.</param>
            <returns>True if the specified Development.Materia.Database.BindedControl already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Contains(System.Object)">
            <summary>
            Returns whether a binded control information with the specified control object exists within the collection or not.
            </summary>
            <param name="control">Control to evaluate.</param>
            <returns>True if an existing Development.Materia.Database.BindedControl with the specified control already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Contains(System.String)">
            <summary>
            Returns whether a binded control information with the specified database field name exists within the collection or not.
            </summary>
            <param name="field">Binded database field name</param>
            <returns>True if an existing Development.Materia.Database.BindedControl with the specified database field name already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Remove(Development.Materia.Database.BindedControl)">
            <summary>
            Removes the specified binded control information from the collection.
            </summary>
            <param name="control">Development.Materia.Database.BindedControl to remove</param>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Remove(System.Object)">
            <summary>
            Removes a binded control information with the specified control object from the collection.
            </summary>
            <param name="control">Control of an existing Development.Materia.Database.BindedControl to remove.</param>
        </member>
        <member name="M:Development.Materia.Database.BindedControlCollection.Remove(System.String)">
            <summary>
            Removes a binded control information with the specified database field name from the collection.
            </summary>
            <param name="field">Binded database field name of an existing Development.Materia.Database.BindedControl to remove.</param>
        </member>
        <member name="P:Development.Materia.Database.BindedControlCollection.Binder">
            <summary>
            Gets the binder associated with the current binded control information collection.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.BindedControlCollection.Item(System.Int32)">
            <summary>
            Gets the binded control information at the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Database.BindedControlCollection.Item(System.Object)">
            <summary>
            Gets the binded control information thru the specified control object within the collection. 
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Database.BindedControlCollection.Item(System.String)">
            <summary>
            Gets the binded control information thru the specified database field name within the collection.
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Database.DataBinderLoadingEventArgs">
            <summary>
            DataBinder data loading event arguments.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinderLoadingEventArgs.#ctor(Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of DataBinderLoadingEventArgs.
            </summary>
            <param name="binding">Currently evealuated DataBinding object</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinderLoadingEventArgs.#ctor(Development.Materia.Database.DataBinding,System.String)">
            <summary>
            Creates a new instance of DataBinderLoadingEventArgs.
            </summary>
            <param name="binding">Currently evealuated DataBinding object</param>
            <param name="error">Encountered exception's message</param>
        </member>
        <member name="P:Development.Materia.Database.DataBinderLoadingEventArgs.Binding">
            <summary>
            Gets the current RecordBinding object that is to-be / currently loaded.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderLoadingEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel preceeding actions after the event this argument was invoked.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderLoadingEventArgs.Error">
            <summary>
            Gets the exception message the invoking event have encountered.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataBinderSavingEventArgs">
            <summary>
            DataBinder data saving event arguments.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinderSavingEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of DataBinderSavingEventArgs.
            </summary>
            <param name="sql">SQL statement</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinderSavingEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of DataBinderSavingEventArgs.
            </summary>
            <param name="sql">SQL statement</param>
            <param name="rowsaffected">Affected number of rows.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinderSavingEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of DataBinderSavingEventArgs.
            </summary>
            <param name="sql">SQL statement</param>
            <param name="error">Exception message</param>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel preceeding events after the current argument was invoked by an event.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.CommandText">
            <summary>
            Gets or sets the current sql statement to be or was executed.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.Error">
            <summary>
            Gets the current encountered exception message.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.ErrorNotification">
            <summary>
            Gets or sets whether the notification message when error has been encountered after data saving execution.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.RowsAffected">
            <summary>
            Gets the number oif database records affected by the executed updates.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderSavingEventArgs.Saved">
            <summary>
            Gets whether the data saving is executed properly and without errors.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataBinderValidationEventArgs">
            <summary>
            DataBinder validation event arguments.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinderValidationEventArgs.#ctor">
            <summary>
            Creates a new instance of DataBinderValidationEventArgs.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinderValidationEventArgs.#ctor(System.Object)">
            <summary>
            Creates a new instance of DataBinderValidationEventArgs.
            </summary>
            <param name="control">Current associated control.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinderValidationEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates a new instance of DataBinderValidationEventArgs.
            </summary>
            <param name="control">Current associated control.</param>
            <param name="valid">A value that determines whether control's value is valid or not.</param>
        </member>
        <member name="P:Development.Materia.Database.DataBinderValidationEventArgs.Cancel">
            <summary>
            Gets or sets whether to cancel preceeding events after this argument was invoked.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderValidationEventArgs.Control">
            <summary>
            Gets the control that is currently eveluated.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderValidationEventArgs.Notification">
            <summary>
            Gets or sets the validation notification that should prompt the user if in case control did not pass the evaluation.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinderValidationEventArgs.Valid">
            <summary>
            Gets whether the current validating control is evaluated as valid or not.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataBinding">
            <summary>
            Data binding information class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder,Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
            <param name="header">Header database binding information</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder,System.String)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
            <param name="sql">Database command text used to deploy automated database record updates</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder,System.String,Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
            <param name="sql">Database command text used to deploy automated database record updates</param>
            <param name="header">Header database binding information</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder,System.String,System.String)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
            <param name="basecommandtext">Database command text used to deploy automated database record updates</param>
            <param name="viewcommandtext">Database command text used to provide customized data binded views specially if records are binded into a grid</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.#ctor(Development.Materia.Database.DataBinder,System.String,System.String,Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of DataBinding.
            </summary>
            <param name="binder">Parent DataBinder component</param>
            <param name="basecommandtext">Database command text used to deploy automated database record updates</param>
            <param name="viewcommandtext">Database command text used to provide customized data binded views specially if records are binded into a grid</param>
            <param name="header">Header database binding information</param>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.AcceptChanges">
            <summary>
            Accepts all relevant changes and updates into the binded values ans have it finalized.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.AttachTableHandlers">
            <summary>
            Attaches binding handlers into the current bindable table.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.BeginLoad">
            <summary>
             Asynchronously loads the data binding information and returns an argument relative to its data loading execution. Call the EndLoad(IAsyncResult) to get synchronization result argument after synchronization is complete.
            </summary>
            <returns>System.IAsyncResult generated from the DataBinding loading asynchornization.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.EndLoad(System.IAsyncResult)">
            <summary>
            Finalizes data loading and returns the result argument based on the specified synchronization called by a BeginLoad function.
            </summary>
            <param name="result">System.IAsyncResult generated from a BeginLoad method call</param>
            <returns>Development.Materia.Database.DataBinderLoadingEventArgs generated from the DataBinding loading routines.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.GetBaseTable">
            <summary>
            Gets the current base table of the current data binding information.
            </summary>
            <returns>Base data source.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.GetSqlStatement">
            <summary>
            Returns the sql statement associated with the updates applied into the current DataBinding.
            </summary>
            <returns>SQL statement generated from the changes applied to the current data bindings.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.GetUpdateStatements">
            <summary>
            Returns the sql command statements generated from the current binding table's changes.
            </summary>
            <returns>SQL statements generated to the current data bindings and it's child data bindings.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.Load">
            <summary>
            Loads the data binding information and returns an argument relative to its data loading execution.
            </summary>
            <returns>Development.Materia.Database.DataBinderLoadingEventArgs generated from the data binding's loading routines.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.RemoveTableHandlers">
            <summary>
            Removes binding handler from the current bindable table.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.SetFieldValues">
            <summary>
            Sets all binded field values from each of the binded controls.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.Update">
            <summary>
            Updates the reference fields of the current binding information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.ToString">
            <summary>
            Returns the DataBinding's given name.
            </summary>
            <returns>Development.Matwria.Database.DataBinding's name.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBinding.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.AllowNoValuesInGrid">
            <summary>
            Gets or sets whether to allow no entries at all in the current binding information's grid. Default value is True.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.BaseCommandText">
            <summary>
            Gets or sets the raw database command text used to deploy automated database record updates.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Binder">
            <summary>
            Gets the parenting DataBinder component.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Details">
            <summary>
            Gets the collection of dependent detail binding information.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.ForeignKey">
            <summary>
            Gets the foreign key field name. This determines header-detail relation linking.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Grid">
            <summary>
            Gets or sets the grid object to where the retrieved data will be binded. Not setting this value will have the retrieved database fields bind into the parented DataBinder's matching binded controls.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Header">
            <summary>
            Gets the header database binding information of the current detail binding information.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Name">
            <summary>
            Gets or sets the current database binding's name.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.PrimaryKey">
            <summary>
            Gets or sets the primary key field name. This will determine constraints and header-detail relationship linking.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.RequiredFields">
            <summary>
             Gets the list of database required fields.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.Table">
            <summary>
             Gets the generated bindable DataTable object.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBinding.ViewCommandText">
            <summary>
            Gets or sets the command text used to provide customized data binded views specially if records are binded into a grid.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataBindingCollection">
            <summary>
            Collection of DataBinder binding information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.#ctor(Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of DataBindingCollection.
            </summary>
            <param name="header">Development.Materia.Database.DataBinding header</param>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Add">
            <summary>
            Adds a new detail binding information into the collection.
            </summary>
            <returns>Newly added detail Development.Materia.Database.DataBinding.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Add(System.String)">
            <summary>
            Adds a new detail binding information into the collection.
            </summary>
            <param name="sql">Raw database command text used to deploy automated database record updates</param>
            <returns>Newly added detail Development.Materia.Database.DataBinding.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Add(System.String,System.String)">
            <summary>
            Adds a new detail binding information into the collection.
            </summary>
            <param name="basecommandtext">Raw database command text used to deploy automated database record updates</param>
            <param name="viewcommandtext">Command text used to provide customized data binded views specially if records are binded into a grid</param>
            <returns>Newly added detail Development.Materia.Database.DataBinding.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Contains(Development.Materia.Database.DataBinding)">
            <summary>
             Returns whether the specified binding information already exists within the collection.
            </summary>
            <param name="binding">Development.Materia.Database.DataBinding to evaluate</param>
            <returns>True if the specified Development.Materia.Database.DataBinding already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Contains(System.String)">
            <summary>
            Returns whether a certain binding information with the specified name exists within the collection or not.
            </summary>
            <param name="name">Development.Materia.Database.DataBinding name to evaluate.</param>
            <returns>True if the specified Development.Materia.Database.DataBinding with the specified name already exists within the collection or not.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Remove(Development.Materia.Database.DataBinding)">
            <summary>
            Removes the specified binding information from the collection.
            </summary>
            <param name="binding">Development.Materia.Database.DataBinding to remove</param>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Remove(System.String)">
            <summary>
            Removes a certain binding information with the specified name from the collection.
            </summary>
            <param name="name">Name of Development.Materia.Database.DataBinding to remove.</param>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.ToString">
            <summary>
            Gets the underlying binding names inside the collection.
            </summary>
            <returns>Underlying binding names inside the collection</returns>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataBindingCollection.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Database.DataBindingCollection.Header">
            <summary>
            Gets the header binding information of the collection.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataBindingCollection.Item(System.Int32)">
            <summary>
            Gets the binding information in the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Database.DataBindingCollection.Item(System.String)">
            <summary>
            Gets a binding information with the specified name within the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Database.RequiredFieldCollection">
            <summary>
            DataBinding class required field collection.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.RequiredFieldCollection.#ctor(Development.Materia.Database.DataBinding)">
            <summary>
            Creates a new instance of RequiredFieldCollection.
            </summary>
            <param name="binding">Development.Materia.Database.DataBinding object that owns the current class.</param>
        </member>
        <member name="M:Development.Materia.Database.RequiredFieldCollection.Add(System.String)">
            <summary>
            Adds a new database required field into the collection.
            </summary>
            <param name="field">Database field name</param>
            <returns>Index of the newly added field name within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.RequiredFieldCollection.Add(System.String[])">
            <summary>
            Adds database required fields into the collection.
            </summary>
            <param name="fields">Database field names.</param>
            <returns>Indexes of the newly added field names within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.RequiredFieldCollection.Contains(System.String)">
            <summary>
            Returns whether the specified field name already exists within the collection.
            </summary>
            <param name="field">Database field name to evaluate.</param>
            <returns>True if the specified databbase field name already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.RequiredFieldCollection.Remove(System.String)">
            <summary>
            Removes the specified field name from the collection.
            </summary>
            <param name="field">Database field name to remove.</param>
        </member>
        <member name="P:Development.Materia.Database.RequiredFieldCollection.Binding">
            <summary>
            Gets the current parented binding information class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.RequiredFieldCollection.Item(System.Int32)">
            <summary>
            Gets the assigned required field in the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.AmountToWordsConverter">
            <summary>
            Numeric value to english word string converting class.
            </summary>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.#ctor">
            <summary>
            Creates a new instance of AmountToWordsConverter.
            </summary>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.#ctor(System.Double)">
            <summary>
            Creates a new instance of AmountToWordsConverter.
            </summary>
            <param name="amounttoconvert">Amount to be converted</param>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.#ctor(System.Double,System.String)">
            <summary>
            Creates a new instance of AmountToWordsConverter.
            </summary>
            <param name="amounttoconvert">Amount to be converted</param>
            <param name="associatedcurrency">Associated currency</param>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.ToString">
            <summary>
            Converts the initialized numeric value into its english-word representation.
            </summary>
            <returns>Returns the english-word representation of the initialized numeric value.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="AmountToWordsConverter 03" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="AmountToWordsConverter 03" language="vbnet" />
            </example>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.AmountToWords(System.Double)">
            <summary>
            Converts the initialized numeric value into its english-word representation.
            </summary>
            <param name="amountvalue">Numeric / amount value to convert</param>
            <returns>Returns the english-words representation of the specified numeric value.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="AmountToWordsConverter 01" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="AmountToWordsConverter 01" language="vbnet" />
            </example>
        </member>
        <member name="M:Development.Materia.AmountToWordsConverter.AmountToWords(System.Double,System.String)">
            <summary>
            Converts the initialized numeric value into its english-word representation suffixed with the specified currency.
            </summary>
            <param name="amountvalue">Numeric / amount value to convert</param>
            <param name="amountcurrency">Suffixing curreny</param>
            <returns>Returns the english-words representation of the specified numeric value suffixed with the specified currency.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="AmountToWordsConverter 02" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="AmountToWordsConverter 02" language="vbnet" />
            </example>
        </member>
        <member name="P:Development.Materia.AmountToWordsConverter.Amount">
            <summary>
            Gets or sets the amount to be converted into english-word.
            </summary>
        </member>
        <member name="P:Development.Materia.AmountToWordsConverter.Currency">
            <summary>
            Gets or sets the currency associated with the english-word result.
            </summary>
        </member>
        <member name="T:Development.Materia.Cryptography.MD5Hash">
            <summary>
            Hash byte generator using MD5.
            </summary>
        </member>
        <member name="M:Development.Materia.Cryptography.MD5Hash.#ctor">
            <summary>
            Creates a new instance of MD5Hash.
            </summary>
        </member>
        <member name="M:Development.Materia.Cryptography.MD5Hash.#ctor(System.String)">
            <summary>
            Creates a new instance of MD5Hash.
            </summary>
            <param name="value">Text to be evaluated for the hash creation</param>
        </member>
        <member name="P:Development.Materia.Cryptography.MD5Hash.Hash">
            <summary>
            Gets the hash byte value generated for the given key value.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.DataObjectMap">
            <summary>
            ORM-approached class for database table contents updating.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.#ctor(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new instance of DataObjectMap.
            </summary>
            <param name="dbconnection">Database connection</param>
            <param name="tablename">Database table name</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.#ctor(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Creates a new instance of DataObjectMap.
            </summary>
            <param name="dbconnection">Database connection</param>
            <param name="tablename">Database table name</param>
            <param name="condition">Database table filter conditions</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.#ctor(System.Data.IDbConnection,System.String,System.String[])">
            <summary>
            Creates a new instance of DataObjectMap.
            </summary>
            <param name="dbconnection">Database connection</param>
            <param name="tablename">Database table name</param>
            <param name="fieldnames">Database table fields to include.</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.#ctor(System.Data.IDbConnection,System.String,System.String,System.String[])">
            <summary>
            Creates a new instance of DataObjectMap.
            </summary>
            <param name="dbconnection">Database connection</param>
            <param name="tablename">Database table name</param>
            <param name="condition">Database table filter conditions</param>
            <param name="fieldnames">Database table fields to include.</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.AddRow">
            <summary>
            Adds a new row into the DataObjectMap's table
            </summary>
            <returns>Newly added System.Data.DataRow.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.AddRow(System.Object[])">
            <summary>
            Adds a new row into the DataObjectMap's table
            </summary>
            <param name="values">Row values to be added.</param>
            <returns>Newly added System.Data.DataRow.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.ApplyUpdatesFromTable(System.Data.DataTable)">
            <summary>
            Applies table updates from the specified DataTable object into the current DataObjectMap's table.
            </summary>
            <param name="table">System.Data.DataTable to based the updates from.</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.BeginSave">
            <summary>
            Asynchronously saves the current DataObjectMap's table updates into the connected database. Call the EndSave method after the synchornization is finish to get the actual sql execution result.
            </summary>
            <returns>System.IAsyncResult generated from a Save asynchornization method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.DeleteAllRows">
            <summary>
            Deletes all table rows from the DataObjectMap.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.DeleteRow(System.Int32)">
            <summary>
            Deletes the table row at the specified index of the DataObjectMap's table.
            </summary>
            <param name="index">Row index</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.DeleteRow(System.String)">
            <summary>
            Deletes table rows that pass the specified condition from the DataObjectMap.
            </summary>
            <param name="condition">Row filtering condition</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.DeleteRows(System.Int32)">
            <summary>
            Deletes specific number of rows to the current table of the DataObjectMap.
            </summary>
            <param name="rows">Number of rows to delete</param>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.EndSave(System.IAsyncResult)">
            <summary>
            Gets the actual sql execution result from an initialized BeginSave method call.
            </summary>
            <param name="result">System.IAsyncResult generated from a BeginSave method call</param>
            <returns>Development.Materia.Database.QueResult object that contains the database update information.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.GenerateSqlStatement">
            <summary>
            Generates sql statement based on the current DataObjectMap's table value updates.
            </summary>
            <returns>SQL statement based on the current Development.Materia.Database.DataObjectMap's updates.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.GenerateSqlStatement(System.String[])">
            <summary>
            Generates sql statement based on the current DataObjectMap's table value updates.
            </summary>
            <param name="excludedfields">List of table fields to be excluded from the sql statement generation.</param>
            <returns>SQL statement based on the current Development.Materia.Database.DataObjectMap's updates.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Refresh">
            <summary>
            Retrieves data from the current connected database based on the current specified database table and filter condition.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.RefreshAsync">
            <summary>
            Asynchronously retrieves data from the current connected database based on the current specified database table and filter condition.
            </summary>
            <returns>System.IAsyncResult generated from the asynchronized Refresh method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Save">
            <summary>
            Saves the current DataObjectMap's table updates into the connected database.
            </summary>
            <returns>Development.Materia.Database.QueResult that contains the database updates applied by the method.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Select(System.Int32)">
            <summary>
            Gets the row at the specified index of the DataObjectMap's table
            </summary>
            <param name="index">Row index</param>
            <returns>System.Data.DataRow in the specified index of the Development.Materia.Database.DataObjectMap</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Select(System.String)">
            <summary>
            Gets rows that pass the specified filter condition from the DataObjectMap's table.
            </summary>
            <param name="condition">Row filtering condition</param>
            <returns>Set of System.Data.DataRow which passed the specified row filtering conditions</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.ToString">
            <summary>
            Gets the current DataObjectMap's database table name.
            </summary>
            <returns>Development.Materia.Database.DataObjectMap hosted database table name.</returns>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.DataObjectMap.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Database.DataObjectMap.Connection">
            <summary>
            Gets the instantiated DataObjectMap's database connection.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataObjectMap.DatabaseTable">
            <summary>
            Gets the instantiated DataObjectMap's database table.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataObjectMap.FilterCondition">
            <summary>
            Gets the instantiated DataObjectMap's database filter condition.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.DataObjectMap.Table">
            <summary>
            Gets the current contents of the instantiated DataObjectMap.
            </summary>
        </member>
        <member name="T:Development.Materia.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.ClearTextImage">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.Grip">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.MySql">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.MySqlDump">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.SevenZ">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.SevenZDll">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.SevenZG">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.validator">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Development.Materia.Properties.Resources.WinRAR">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Development.Materia.Database.Que">
            <summary>
            Database command execution class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.Que.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of Que.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="query">Database command statement</param>
        </member>
        <member name="M:Development.Materia.Database.Que.#ctor(System.String,System.String,Development.Materia.CommandExecution)">
            <summary>
            Creates a new instance of Que.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="query">Database command statement</param>
            <param name="execution">Database command execution mode</param>
        </member>
        <member name="M:Development.Materia.Database.Que.#ctor(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new instance of Que.
            </summary>
            <param name="connection">Database connection object</param>
            <param name="query">Database command statement</param>
        </member>
        <member name="M:Development.Materia.Database.Que.#ctor(System.Data.IDbConnection,System.String,Development.Materia.CommandExecution)">
            <summary>
            Creates a new instance of Que.
            </summary>
            <param name="connection">Database connection object</param>
            <param name="query">Database command statement</param>
            <param name="execution">Database command execution mode</param>
        </member>
        <member name="M:Development.Materia.Database.Que.BeginExecute">
            <summary>
            Executes the current sql command information associated with the current class asynchronously. Result can be get thru EndExecute function when the synchronization is completed.
            </summary>
            <returns>System.IAsyncResult generated from the asynchronous Execute method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.BeginExecution(System.String,System.String)">
            <summary>
            Executes and generates result information using the specified database and command information. Result can be get thru EndExecute function when the synchronization is completed.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statements</param>
            <returns>System.IAsyncResult generated from the asynchronous Execute method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.BeginExecution(System.String,System.String,Development.Materia.CommandExecution)">
            <summary>
            Executes and generates result information using the specified database and command information. Result can be get thru EndExecute function when the synchronization is completed.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statements</param>
            <param name="execution">Database command execution mode</param>
            <returns>System.IAsyncResult generated from the asynchronous Execute method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.BeginExecution(System.Data.IDbConnection,System.String)">
            <summary>
            Executes and generates result information using the specified database and command information. Result can be get thru EndExecute function when the synchronization is completed.
            </summary>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statements</param>
            <returns>System.IAsyncResult generated from the asynchronous Execute method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.BeginExecution(System.Data.IDbConnection,System.String,Development.Materia.CommandExecution)">
            <summary>
            Executes and generates result information using the specified database and command information. Result can be get thru EndExecute function when the synchronization is completed.
            </summary>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statements</param>
            <param name="execution">Database command execution mode</param>
            <returns>System.IAsyncResult generated from the asynchronous Execute method call.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.EndExecute(System.IAsyncResult)">
            <summary>
            Returns the QueResult object generated by a completed BeginExecute call. 
            </summary>
            <param name="result">System.IAsyncResult generated from a BeginExecute method call.</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.EndExecution(System.IAsyncResult)">
            <summary>
            Returns the QueResult object generated by a completed BeginExecution call. 
            </summary>
            <param name="result">System.IAsyncResult generated from a BeginExecution method call.</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Execute">
            <summary>
            Executes the current sql command information associated with the current class.
            </summary>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Execute(System.String,System.String)">
            <summary>
            Executes and generates result information using the specified database and command information.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statements</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Execute(System.String,System.String,Development.Materia.CommandExecution)">
            <summary>
            Executes and generates result information using the specified database and command information.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statements</param>
            <param name="execution">Database command execution mode</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Execute(System.Data.IDbConnection,System.String)">
            <summary>
            Executes and generates result information using the specified database and command information.
            </summary>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statements</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Execute(System.Data.IDbConnection,System.String,Development.Materia.CommandExecution)">
            <summary>
            Executes and generates result information using the specified database and command information.
            </summary>
            <param name="connection">Database connection</param>
            <param name="sql">Database command statements</param>
            <param name="execution">Database command execution mode</param>
            <returns>Development.Materia.Database.QueResult which contains the Sql command execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.GetValue``1(System.String,System.String)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Sql command statement</param>
            <returns>A value based on the supplied command statement. Returns a default suggested value of the specified type if error has been encountered or no resultset has been returned by the command.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.GetValue``1(System.String,System.String,``0)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Sql command statement</param>
            <param name="defaultvalue">Default value in case record retrieval fails or no record has been found</param>
            <returns>A value based on the supplied command statement. Returns a default suggested value of the specified type if error has been encountered or no resultset has been returned by the command.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.GetValue``1(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connection">Database connection</param>
            <param name="sql">Sql command statement</param>
            <returns>A value based on the supplied command statement. Returns a default suggested value of the specified type if error has been encountered or no resultset has been returned by the command.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.GetValue``1(System.Data.IDbConnection,System.String,``0)">
            <summary>
            Gets the value at the first row of the first column of the result set ignoring other values.
            </summary>
            <typeparam name="T">Expected return type</typeparam>
            <param name="connection">Database connection</param>
            <param name="sql">Sql command statement</param>
            <param name="defaultvalue">Default value in case record retrieval fails or no record has been found</param>
            <returns>A value based on the supplied command statement. Returns a default suggested value of the specified type if error has been encountered or no resultset has been returned by the command.</returns>
        </member>
        <member name="M:Development.Materia.Database.Que.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.Que.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Database.Que.CommandExecution">
            <summary>
            Gets or sets the command execution mode to be performed by the class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Que.CommandText">
            <summary>
            Gets or sets the database command statement to be executed by the class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Que.Connection">
            <summary>
            Gets the database connection used by the class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Que.ConnectionString">
            <summary>
            Gets or sets the SQL command statement to be executed by the class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Que.Delimiter">
            <summary>
            Gets or sets the delimiter string that serves as separator from one command statement from the other.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.QueResult">
            <summary>
            Que execution result information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.QueResult.#ctor(Development.Materia.Database.Que)">
            <summary>
            Creates a new instance of QueResult.
            </summary>
            <param name="que">Development.Materia.Database.Que that executes the Sql command.</param>
        </member>
        <member name="M:Development.Materia.Database.QueResult.Execute">
            <summary>
            Executes the associated Que object's command statements to get the results.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.QueResult.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.QueResult.Dispose(Development.Materia.QueResultDisposition)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposition">Disposition type</param>
        </member>
        <member name="M:Development.Materia.Database.QueResult.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Database.QueResult.Error">
            <summary>
            Gets the error message trapped during the current associated Que object's command execution.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueResult.Que">
            <summary>
            Gets the current associated Que object to where the result came from.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueResult.ResultSet">
            <summary>
            Gets the lists of result tables produce by the associated Que object.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueResult.RowsAffected">
            <summary>
            Gets the number of the database rows affected by the command specified in the associated Que object.
            </summary>
        </member>
        <member name="T:Development.Materia.Controls.SizableTextBox">
            <summary>
            Textbox editor with sizable grip border.
            </summary>
        </member>
        <member name="T:Development.Materia.Controls.WaterMarkedTextBox">
            <summary>
            Watermark supported textbox control.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.WaterMarkedTextBox.#ctor">
            <summary>
            Creates a new instance of WaterMarkedTextBox.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.WaterMarkedTextBox.OnCreateControl">
            <summary>
            Raises the OnCreate method.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.WaterMarkedTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint method.
            </summary>
            <param name="e">Argument that provides the control's painting information.</param>
        </member>
        <member name="P:Development.Materia.Controls.WaterMarkedTextBox.WaterMarkForeColor">
            <summary>
            Gets or sets the foreground color for the watermark text.
            </summary>
        </member>
        <member name="P:Development.Materia.Controls.WaterMarkedTextBox.WaterMarkText">
            <summary>
            Gets or sets the watermark text associated with the control.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.SizableTextBox.#ctor">
            <summary>
            Creates a new instance of SizableTextBox.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.SizableTextBox.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Development.Materia.Database.GenericDataAdapter">
            <summary>
            Generic DataAdapter class for flexible data connection object.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.GenericDataAdapter.#ctor">
            <summary>
            Creates a new instance of GenericDataAdapter.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.GenericDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of GenericDataAdapter.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Sql command statement</param>
        </member>
        <member name="M:Development.Materia.Database.GenericDataAdapter.#ctor(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new instance of GenericDataAdapter.
            </summary>
            <param name="connection">Database connection</param>
            <param name="sql">Sql command statement</param>
        </member>
        <member name="M:Development.Materia.Database.GenericDataAdapter.#ctor(System.Data.IDbCommand)">
            <summary>
            Creates a new instance of GenericDataAdapter.
            </summary>
            <param name="command">SqlCommand object</param>
        </member>
        <member name="T:Development.Materia.Database.Dsn">
            <summary>
            Class to create a DSN data access programatically.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.Dsn.Create(System.String,System.String)">
            <summary>
            Creates the Dsn with the specified database driver and database connection attributes.
            </summary>
            <param name="driver">Database driver</param>
            <param name="attributes">DSN attributes</param>
            <returns>True if DSN has been added, otherwise false.</returns>
        </member>
        <member name="T:Development.Materia.Net.DownloadInvokations">
            <summary>
            Download event invokation enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadInvokations.EventRaiser">
            <summary>
            Actual download events.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadInvokations.FileDownloadFailedRaiser">
            <summary>
            Download failure events.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadInvokations.CalculatingFileNrRaiser">
            <summary>
            Download calculation events.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.DownloadTransitions">
            <summary>
            Download transition enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.CalculationFileSizesStarted">
            <summary>
            While trying to calculate total size of download file.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.FileSizesCalculationComplete">
            <summary>
            After download file size has been determined.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.DeletingFileAfterDownload">
            <summary>
            Download file deletion after successful download process.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.DeletingFilesAfterCancel">
            <summary>
            Download file deletion when process has been cancelled.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.FileDownloadAttempting">
            <summary>
            Attempting to communicate with the download server.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.FileDownloadStarted">
            <summary>
             File download has been started.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.FileDownloadStopped">
            <summary>
            File download has been terminated.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.FileDownloadSucceeded">
            <summary>
            File download finished successfully.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.DownloadTransitions.ProgressChanged">
            <summary>
            File download is progressing.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.Downloader">
            <summary>
            HTTP and FTP downloader with progress report feature.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.#ctor">
            <summary>
            Creates a new instance of Downloader.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of Downloader.
            </summary>
            <param name="supportsprogressreport">Determines whether downloader supports progress report or not</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnCalculationFileSizesStarted(System.EventArgs)">
            <summary>
            Calls the CalculationFileSizesStarted event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnCancelled(System.EventArgs)">
            <summary>
            Calls the Cancelled event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnCancelRequested(System.EventArgs)">
            <summary>
            Calls the CancelRequested event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnCompleted(System.EventArgs)">
            <summary>
            Calls the Completed event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnDeleteFilesAfterCancel(System.EventArgs)">
            <summary>
            Calls the DeleteFilesAfterCancel event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnDeletingFileAfterDownload(System.EventArgs)">
            <summary>
            Calls the DeletingFileAfterDownload event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnCalculatingFileSize(System.Int32)">
            <summary>
            Calls the CalculatingFileSize event.
            </summary>
            <param name="e">Current downloading file size</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileDownloadAttempting(System.EventArgs)">
            <summary>
            Calls the FileDownloadAttempting event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileDownloadFailed(System.Exception)">
            <summary>
            Calls the FileDownloadFailed event.
            </summary>
            <param name="e">Encountered exception</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileDownloadStarted(System.EventArgs)">
            <summary>
            Calls the FileDownloadStarted event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileDownloadStopped(System.EventArgs)">
            <summary>
            Calls the FileDownloadStopped  event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileDownloadSucceeded(System.EventArgs)">
            <summary>
            Calls the FileDownloadSucceeded event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnFileSizesCalculationComplete(System.EventArgs)">
            <summary>
            Calls the FileSizesCalculationComplete event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnIsBusyChanged(System.EventArgs)">
            <summary>
            Calls the IsBusyChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnIsPausedChanged(System.EventArgs)">
            <summary>
            Calls the IsPausedChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnPaused(System.EventArgs)">
            <summary>
            Calls the Paused event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnProgressChanged(System.EventArgs)">
            <summary>
            Calls the ProgressChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnResumed(System.EventArgs)">
            <summary>
            Calls the Resumed event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnStarted(System.EventArgs)">
            <summary>
            Calls the Started event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnStateChanged(System.EventArgs)">
            <summary>
            Calls the StateChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.OnStopped(System.EventArgs)">
            <summary>
            Calls the Stopped event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.FormatSizeBinary(System.Int64)">
            <summary>
            Formats the amount of bytes to a more readable notation with binary notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <returns>The specified value to a more readable string notation.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.FormatSizeBinary(System.Int64,System.Int32)">
            <summary>
            Formats the amount of bytes to a more readible notation with binary notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <param name="decimals">The amount of decimals for the notation</param>
            <returns>The specified value to a more readable string notation.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.FormatSizeDecimal(System.Int64)">
            <summary>
            Formats the amount of bytes to a more readible notation with decimal notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <returns>The specified value to a more readable string notation.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.FormatSizeDecimal(System.Int64,System.Int32)">
            <summary>
            Formats the amount of bytes to a more readible notation with decimal notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <param name="decimals">The amount of decimals for the notation</param>
            <returns>The specified value to a more readable string notation.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.GetCurrentDownloadPercentage(System.Int32)">
            <summary>
             Returns the current downloading file progress percentage.
            </summary>
            <param name="decimals">Number of decimals.</param>
            <returns>Download file progress percentage.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.GetTotalDownloadPercentage(System.Int32)">
            <summary>
            Gets the total download percentage.
            </summary>
            <param name="decimals">Number of decimals.</param>
            <returns>Total download progress percentage.</returns>
        </member>
        <member name="M:Development.Materia.Net.Downloader.SetBusy(System.Boolean)">
            <summary>
            Sets the downloader's busy state.
            </summary>
            <param name="busy">Value that determines whether downloader is marked as busy or not.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.SetPacketSize(System.Int32)">
            <summary>
            Sets the downloader's allocated packet size block.
            </summary>
            <param name="packets">Maximum download speed size limit.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.SetPaused(System.Boolean)">
            <summary>
            Sets the current downloader's paused state.
            </summary>
            <param name="paused">Value that determines whether to mark the downloader as pasued or not.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Start">
            <summary>
            Starts the download process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Pause">
            <summary>
            Pause the download process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Resume">
            <summary>
            Resumes the download process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Stop">
            <summary>
            Cancels the currently running download process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Stop(System.Boolean)">
            <summary>
            Cancels the currently running download process.
            </summary>
            <param name="deletecompletedfiles">Indicates whether the completed downloaded files should be deleted or not.</param>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Downloader.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Development.Materia.Net.Downloader.CalculationFileSizesStarted">
            <summary>
            Occurs when the calculation of the file sizes has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Cancelled">
            <summary>
            Occurs when the file downloading has been canceled by the user
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.CancelRequested">
            <summary>
            Occurs when the user has requested to cancel the downloads
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Completed">
            <summary>
            Occurs when the file downloading has been completed (without canceling it)
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.DeleteFilesAfterCancel">
            <summary>
            Occurs when the user has requested to cancel the downloads and the cleanup of the downloaded files has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.DeletingFileAfterDownload">
            <summary>
            Occurs when a certain download file is about to be removed in the server after successfult file download process.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.CalculatingFileSize">
            <summary>
            Occurs when the calculation of the file sizes has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileDownloadAttempting">
            <summary>
            Occurs when the FileDownloader attempts to get a web response to download the file.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileDownloadFailed">
            <summary>
            Occurs when a file download has been completed unsuccessfully
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileDownloadStarted">
            <summary>
            Occurs when a file download has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileDownloadStopped">
            <summary>
            Occurs when a file download has stopped
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileDownloadSucceeded">
            <summary>
            Occurs when a file download has been completed successfully
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.FileSizesCalculationComplete">
            <summary>
            Occurs when the FileDownloader attempts to get a web response to download the file
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.IsBusyChanged">
            <summary>
            Occurs when the busy state of the FileDownloader has changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.IsPausedChanged">
            <summary>
            Occurs when the pause state of the FileDownloader has changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Paused">
            <summary>
            Occurs when the file downloading has been paused.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.ProgressChanged">
            <summary>
            Occurs every time a block of data has been downloaded
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Resumed">
            <summary>
            Occurs when the file downloading has been resumed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Started">
            <summary>
            Occurs when the file downloading has started.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.StateChanged">
            <summary>
            Occurs when the either the busy or pause state of the FileDownloader have changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Downloader.Stopped">
            <summary>
            Occurs when the file downloading has been stopped by either cancellation or completion
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CanResume">
            <summary>
            Gets whether the downloader can resume the download process or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CanStart">
            <summary>
            Gets whether the downloader can start a new process or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CanStop">
            <summary>
            Gets whether the downloader can be cancelled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CurrentlyDownloaded">
            <summary>
            Gets the total bytes downloaded for the current downloading file. To get the overall download size refer to TotalDownloaded value.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CurrentDownloadPercentage">
            <summary>
            Gets the current downloading file progress percentage.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.CurrentDownloadSize">
            <summary>
            Gets the size of the current downloading file size in bytes.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.DeleteCompletedFilesAfterCancel">
            <summary>
            Gets or sets whether the download process will delete currently downloaded files when cancelled or not. Default value is set to False. 
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.DownloadSpeed">
            <summary>
            Gets the current download speed in bytes.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.Downloads">
            <summary>
            Gets the lists of download files.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.IsBusy">
            <summary>
            Gets whether the downloader is currently busy or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.IsCancelled">
            <summary>
            Gets whether the download process has ben cancelled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.IsPaused">
            <summary>
            Gets whether the downloader is currently at paused state or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.LocalDirectory">
            <summary>
            Gets or sets the local directory in which files will be stored.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.PacketSize">
            <summary>
            Gets the size of the blocks that will be downloaded.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.StopWatchCycle">
            <summary>
            Gets or sets the amount of blocks that need to be downloaded before the progress speed is re-calculated. Note: setting this to a low value might decrease the accuracy of the calculation. Default value is 5.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.SupportsProgress">
            <summary>
            Gets or sets whether the downloader supports progress reports or not. When enabled, downloader will have to make computations of the downloading files before proceeding with the download process. Default value is set to False.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.TotalDownloaded">
            <summary>
            Gets the total amount of bytes being downloaded.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.TotalDownloadPercentage">
            <summary>
            Gets the total download percentage.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Downloader.TotalDownloadSize">
            <summary>
            Gets the total size of all files together. Correct value will be returned if SupportsProgress is set otherwise returns 0.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.Downloader.FileDownloadFailedEventHandler">
            <summary>
            Event handler that is invoked when download routine fails.
            </summary>
            <param name="sender"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Development.Materia.Net.Downloader.FileSizeCalculationEventHandler">
            <summary>
            Event handler that is invoked upon download file size calculation routines.
            </summary>
            <param name="sender"></param>
            <param name="filenumber"></param>
        </member>
        <member name="T:Development.Materia.Net.DownloadFileInfo">
            <summary>
            Download file information class.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of DownloadFileInfo.
            </summary>
            <param name="downloadpath">The http or ftp path of the downloading file</param>
            <param name="uid">Server authentication User Id</param>
            <param name="pwd">Server authentication Password</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of DownloadFileInfo.
            </summary>
            <param name="downloadpath">The http or ftp path of the downloading file</param>
            <param name="uid">Server authentication User Id</param>
            <param name="pwd">Server authentication Password</param>
            <param name="deletefileafterdownload">Determines whether to delete file from the server after successfult download</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfo.#ctor(System.String,System.Net.NetworkCredential)">
            <summary>
            Creates a new instance of DownloadFileInfo.
            </summary>
            <param name="downloadpath">The http or ftp path of the downloading file</param>
            <param name="credential">Network authentication information for the download server</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfo.#ctor(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Creates a new instance of DownloadFileInfo.
            </summary>
            <param name="downloadpath">The http or ftp path of the downloading file</param>
            <param name="credential">Network authentication information for the download server</param>
            <param name="deletefileafterdownload">Determines whether to delete file from the server after successfult download</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfo.ToString">
            <summary>
            Returns the name of the downloaded file.
            </summary>
            <returns>Download name.</returns>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfo.DeleteFileAfterDownload">
            <summary>
            Gets or sets whether to delete the specified download file from the server after successful download. This is applicable only for ftp file downloads. Default value is False.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfo.Credentials">
            <summary>
            Gets or sets the downloading file's http or ftp network credentials. Not specifying this value indicates there is no authentications needed in the download server.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfo.Name">
            <summary>
            Gets or sets the downloading file's associated name.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfo.Path">
            <summary>
            Gets the currently initialized downnloading file's path.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.DownloadFileInfoCollection">
            <summary>
            Collection of download file information.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.#ctor(Development.Materia.Net.Downloader)">
            <summary>
            Creates a new instance of DownloadFileInfoCollection
            </summary>
            <param name="downloader">Development.Materia.Net.Downloader object that owns the collection.</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Add(System.String)">
            <summary>
            Adds a new download file information into the collection.
            </summary>
            <param name="path">Http or Ftp download path</param>
            <returns>Development.Materia.Net.DownloadFileInfo object that has been added.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new download file information into the collection.
            </summary>
            <param name="path">Http or Ftp download path</param>
            <param name="uid">Server authentication User Id</param>
            <param name="pwd">Server authentication Password</param>
            <returns>Development.Materia.Net.DownloadFileInfo object that has been added.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new download file information into the collection.
            </summary>
            <param name="path">Http or Ftp download path</param>
            <param name="uid">Server authentication User Id</param>
            <param name="pwd">Server authentication Password</param>
            <param name="deletfileafterdownload">Determines whether to delete download file from the server after successful download process</param>
            <returns>Development.Materia.Net.DownloadFileInfo object that has been added.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Add(System.String,System.Net.NetworkCredential)">
            <summary>
            Adds a new download file information into the collection.
            </summary>
            <param name="path">Http or Ftp download path</param>
            <param name="credential">Server authentication credentials</param>
            <returns>Development.Materia.Net.DownloadFileInfo object that has been added.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Add(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Adds a new download file information into the collection.
            </summary>
            <param name="path">Http or Ftp download path</param>
            <param name="credential">Server authentication credentials</param>
            <param name="deletfileafterdownload">Determines whether to delete download file from the server after successful download process</param>
            <returns>Development.Materia.Net.DownloadFileInfo object that has been added.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Contains(System.String)">
            <summary>
            Returns whether an specific download file information with the specified name exists within the collection or not.
            </summary>
            <param name="name">Download name.</param>
            <returns>True if collection contains a member with the specified download name otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Contains(Development.Materia.Net.DownloadFileInfo)">
            <summary>
            Returns whether the specified download information already exists within the collection or not.
            </summary>
            <param name="info">Development.Materia.Net.DownloadFileInfo to evaluate.</param>
            <returns>True if value exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Remove(System.String)">
            <summary>
            Removes a certain download file information with the specified name from the collection.
            </summary>
            <param name="name">Download name to remove from the collection.</param>
        </member>
        <member name="M:Development.Materia.Net.DownloadFileInfoCollection.Remove(Development.Materia.Net.DownloadFileInfo)">
            <summary>
            Removes the specified download file information from the collection.
            </summary>
            <param name="info">Development.Materia.Net.DownloadFileInfo to remove from the collection.</param>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfoCollection.Downloader">
            <summary>
            Gets the current hosted Downloader.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfoCollection.Item(System.Int32)">
            <summary>
            Gets the downloading file information in the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Net.DownloadFileInfoCollection.Item(System.String)">
            <summary>
            Gets a downloading file information with the specified name within the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Database.MySql">
            <summary>
            MySQL query execution and backup functionalities.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.MySql.CreateDSN(System.String)">
            <summary>
            Creates a DSN connection using the specified database information.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <returns>DSN System.Data.IDbConnection created from the specified database connection string.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.CreateDSN(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a DSN connection using the specified database information.
            </summary>
            <param name="server">Server hostname or IP address</param>
            <param name="database">Database catalog name</param>
            <param name="uid">User Id</param>
            <param name="pwd">Password</param>
            <returns>DSN System.Data.IDbConnection created from the specified database connection parameters.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.CreateDSN(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a DSN connection using the specified database information.
            </summary>
            <param name="server">Server hostname or IP address</param>
            <param name="database">Database catalog name</param>
            <param name="uid">User Id</param>
            <param name="pwd">Password</param>
            <param name="port">Port</param>
            <returns>DSN System.Data.IDbConnection created from the specified database connection parameters.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Dump(System.String,System.String)">
            <summary>
            Backup a MySql database using the specified database connection string into the specified file.
            </summary>
            <param name="connectionstring">MySql connection string</param>
            <param name="filename">Backup file path</param>
            <returns>Development.Materia.Database.MySqlResult that contains the MySql dump operations information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Dump(System.String,System.String,Development.Materia.Database.MySqlDumpParameterCollection)">
            <summary>
            Backup a MySql database using the specified database connection string into the specified file.
            </summary>
            <param name="connectionstring">MySql connection string</param>
            <param name="filename">Backup file path</param>
            <param name="parameters">MySql dump parameter</param>
            <returns>Development.Materia.Database.MySqlResult that contains the MySql dump operations information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Execute(System.String,System.IO.FileInfo)">
            <summary>
            Executes the specified sql commandtext using MySql application itself.
            </summary>
            <param name="connectionstring">MySql database connection string</param>
            <param name="file">MySql dump file to where the sql statements resides</param>
            <returns>Development.Materia.Database.MySqlResult that contains the direct MySql application SQL execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Execute(System.String,System.IO.FileInfo,Development.Materia.Database.MySqlParameterCollection)">
            <summary>
            Executes the specified sql commandtext using MySql application itself.
            </summary>
            <param name="connectionstring">MySql database connection string</param>
            <param name="file">MySql dump file to where the sql statements resides</param>
            <param name="parameters">Additional MySql parameters</param>
            <returns>Development.Materia.Database.MySqlResult that contains the direct MySql application SQL execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Execute(System.String,System.String)">
            <summary>
            Executes the specified sql commandtext using MySql application itself.
            </summary>
            <param name="connectionstring">MySql database connection string</param>
            <param name="sql">Sql command statements</param>
            <returns>Development.Materia.Database.MySqlResult that contains the direct MySql application SQL execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.Execute(System.String,System.String,Development.Materia.Database.MySqlParameterCollection)">
            <summary>
            Executes the specified sql commandtext using MySql application itself.
            </summary>
            <param name="connectionstring">MySql database connection string</param>
            <param name="sql">Sql command statements</param>
            <param name="parameters">Additional MySql parameters</param>
            <returns>Development.Materia.Database.MySqlResult that contains the direct MySql application SQL execution information.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetDataSet(System.String)">
            <summary>
            Returns a DataSet composed of the specified database's table schema and contents using the supplied connection string.
            </summary>
            <param name="connectionstring">Database connection string.</param>
            <returns>System.Data.DataSet which contains the current connected database table schemas and contents. Returns nothing if error has been encountered during data-retrieval operations.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetDataSet(System.Data.IDbConnection)">
            <summary>
            Returns a DataSet composed of the specified database's table schema and contents.
            </summary>
            <param name="connection">Database connection object.</param>
            <returns>System.Data.DataSet which contains the current connected database table schemas and contents. Returns nothing if error has been encountered during data-retrieval operations.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetParameterValue(Development.Materia.MySqlDumpParameters)">
            <summary>
            Returns the MySql dump parameter representation of the specified MySqlDumpParameters enumeration.
            </summary>
            <param name="parameter">MySqlDumpParamater to evaluate</param>
            <returns>MySql dump parameter representation of the specified enumeration.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetParameterValue(Development.Materia.MySqlParameters)">
            <summary>
            Returns the MySql dump parameter representation of the specified MySqlParameters enumeration.
            </summary>
            <param name="parameter">MySqlParamater to evaluate</param>
            <returns>MySql application parameter representation of the specified enumeration.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetServerDateAndTime(System.String,System.String,System.String,System.String)">
            <summary>
            Gets the current server's date and time using the specified database connection string.
            </summary>
            <param name="server">Server hostname or IP address</param>
            <param name="database">Database catalog name</param>
            <param name="uid">Database account user id.</param>
            <param name="pwd">Database account password</param>
            <returns>Server's data and time.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetServerDateAndTime(System.String)">
            <summary>
            Gets the current server's date and time using the specified database connection string.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <returns>Server's data and time.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetServerDateAndTime(System.Data.IDbConnection)">
            <summary>
            Gets the current server's date and time using the specified database connection.
            </summary>
            <param name="connection">Database connection</param>
            <returns>Server's data and time.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetTables(System.String)">
            <summary>
            Gets the list of tables in a certain database using the specified database connection string.
            </summary>
            <param name="connectionstring">Database connection string</param>
            <returns>List of database table names.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySql.GetTables(System.Data.IDbConnection)">
            <summary>
            Gets the list of tables in a certain database using the specified database connection.
            </summary>
            <param name="connection">Database connection</param>
            <returns>List of database table names.</returns>
        </member>
        <member name="P:Development.Materia.Database.MySql.MaxAllowedPacket">
            <summary>
            Gets or sets the globally assigned max allowed packet in (MB) for the connected MySQL database server. Default value is 150.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.MySqlDumpParameterCollection">
            <summary>
            Collection of MySql dump parameters.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.ParameterCollection">
            <summary>
            Collection of string parameters.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.ParameterCollection.#ctor">
            <summary>
            Creates a new instance of ParameterCollection.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.ParameterCollection.Add(System.String)">
            <summary>
            Adds a new parameter in the collection.
            </summary>
            <param name="parameter">MySql application or dump parameter.</param>
            <returns>Index of the parameter within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.ParameterCollection.Contains(System.String)">
            <summary>
            Returns whether the specified parameter string already exists in the collection or not.
            </summary>
            <param name="parameter">MySql application or dump parameter to evaluate.</param>
            <returns>True if the parameter already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.ParameterCollection.Remove(System.String)">
            <summary>
            Removes the specified parameter string from the collection.
            </summary>
            <param name="parameter">MySql application or dump parameter to remove.</param>
        </member>
        <member name="P:Development.Materia.Database.ParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the parameter string at the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Development.Materia.Database.MySqlDumpParameterCollection.Add(Development.Materia.MySqlDumpParameters)">
            <summary>
            Adds a new parameter in the collection.
            </summary>
            <param name="parameter">MySql dump parameter.</param>
            <returns>Index of the newly added parameter within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySqlDumpParameterCollection.Contains(Development.Materia.MySqlDumpParameters)">
            <summary>
            Returns whether the specified parameter already exists in the collection or not.
            </summary>
            <param name="parameter">MySql dump parameter to eveluate.</param>
            <returns>True if the parameter already exists within the collection owtherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySqlDumpParameterCollection.Remove(Development.Materia.MySqlDumpParameters)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="parameter">MySql dump parameter to remove</param>
        </member>
        <member name="T:Development.Materia.Database.MySqlParameterCollection">
            <summary>
            Collection of MySql application parameters.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.MySqlParameterCollection.Add(Development.Materia.MySqlParameters)">
            <summary>
            Adds a new parameter in the collection.
            </summary>
            <param name="parameter">MySql application parameter</param>
            <returns>Index of the newly added MySql application parameter within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySqlParameterCollection.Contains(Development.Materia.MySqlParameters)">
            <summary>
            Returns whether the specified parameter already exists in the collection or not.
            </summary>
            <param name="parameter">MySql application parameter to evaluate.</param>
            <returns>True if parameter already exists within the application otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.MySqlParameterCollection.Remove(Development.Materia.MySqlParameters)">
            <summary>
            Removes the specified parameter from the collection.
            </summary>
            <param name="parameter">MySql application parameter to remove.</param>
        </member>
        <member name="T:Development.Materia.Database.MySqlResult">
            <summary>
            MySql database importation or exportation results.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.MySqlResult.#ctor(System.String)">
            <summary>
            Creates a new instance of MySqlResult.
            </summary>
            <param name="filename">Relative output or input file path</param>
        </member>
        <member name="M:Development.Materia.Database.MySqlResult.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of MySqlResult.
            </summary>
            <param name="filename">Relative output or input file path</param>
            <param name="error">Exception message encountered during exportation or importation</param>
        </member>
        <member name="M:Development.Materia.Database.MySqlResult.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of MySqlResult.
            </summary>
            <param name="filename">Relative output or input file path</param>
            <param name="error">Exception message encountered during exportation or importation</param>
            <param name="sql">Executed sql statement</param>
        </member>
        <member name="P:Development.Materia.Database.MySqlResult.Error">
            <summary>
            Gets the exception message encountered during data exportation or importation.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.MySqlResult.RelativeFile">
            <summary>
            Gets the exported or dump file's information.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.MySqlResult.SqlStatement">
            <summary>
            Gets the executed sql statement.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.MySqlResult.Succeeded">
            <summary>
            Gets whether the data exportation or importation succeeds or not.
            </summary>
        </member>
        <member name="T:Development.Materia.DateInterval">
            <summary>
            Date and time interval enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Day">
            <summary>
            Day of week.
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.DayOfYear">
            <summary>
            Day of year.
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Hour">
            <summary>
            Hours
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Minute">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Month">
            <summary>
            Months
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Quarter">
            <summary>
            Quarter of year.
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Second">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Week">
            <summary>
            Weeks
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.WeekOfYear">
            <summary>
            Week of year.
            </summary>
        </member>
        <member name="F:Development.Materia.DateInterval.Year">
            <summary>
            Years
            </summary>
        </member>
        <member name="T:Development.Materia.FirstDayOfWeek">
            <summary>
            First day of week enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Sunday">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Monday">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Tuesday">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Wednesday">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Thursday">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Friday">
            <summary>
            Friday
            </summary>
        </member>
        <member name="F:Development.Materia.FirstDayOfWeek.Saturday">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="T:Development.Materia.VisualBasic">
            <summary>
            Visual Basic mimics (for C# convenience).
            </summary>
        </member>
        <member name="M:Development.Materia.VisualBasic.Asc(System.Char)">
            <summary>
            Works like Visual Basic Asc method.
            </summary>
            <param name="character">Character to interpret</param>
            <returns>ASCII representation of the specified character.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.Asc(System.String)">
            <summary>
            Works like Visual Basic Asc method.
            </summary>
            <param name="value">String to interpret</param>
            <returns>ASCII representation of the specified string.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CBool(System.Object)">
            <summary>
            Works like Visual Basic CBool method.
            </summary>
            <param name="value">Expression to convert.</param>
            <returns>System.Boolean representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CByte(System.Object)">
            <summary>
            Works like Visual Basic CByte method
            </summary>
            <param name="value">Expression to convert</param>
            <returns>System.Byte representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CDate(System.Object)">
            <summary>
            Works like Visual Basic CDate method.
            </summary>
            <param name="value">Expression to convert.</param>
            <returns>System.Date representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CDec(System.Object)">
            <summary>
            Works like Visual Basic CDec method.
            </summary>
            <param name="value">Expression to convert.</param>
            <returns>System.Decimal representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CDbl(System.Object)">
            <summary>
            Works like Visual Basic CDbl method.
            </summary>
            <param name="value">Expression to convert.</param>
            <returns>System.Double representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CInt(System.Object)">
            <summary>
            Works like Visual Basic CInt method.
            </summary>
            <param name="value">Expression to convert</param>
            <returns>System.Integer representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CSByte(System.Object)">
            <summary>
            Works like Visual Basic CSByte method.
            </summary>
            <param name="value">Expression to convert</param>
            <returns>System.SByte repsentation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CShort(System.Object)">
            <summary>
            Works like Visual basic CShort method.
            </summary>
            <param name="value">Expression to convert</param>
            <returns>System.Short representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CSng(System.Object)">
            <summary>
            Works like Visual Basic CSng method.
            </summary>
            <param name="value">Expression to convert</param>
            <returns>System.Single representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.Chr(System.Int32)">
            <summary>
            Works like Visual Basic Chr method.
            </summary>
            <param name="ascii">ASCII code to convert</param>
            <returns>System.Char representation of the specified ASCII code.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.CLng(System.Object)">
            <summary>
            Works like Visual Basic CLng method.
            </summary>
            <param name="value">Expression to convert.</param>
            <returns>System.Long representation of the specified expression.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.DateDiff(Development.Materia.DateInterval,System.DateTime,System.DateTime)">
            <summary>
            Works like Visual Basic DateDiff method.
            </summary>
            <param name="interval">Date interval</param>
            <param name="date1">1st Date value</param>
            <param name="date2">2nd Date value</param>
            <returns>Duration of the two dates from each other in the specified date interval.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.DeleteSetting(System.String,System.String,System.String)">
            <summary>
            Works like built-in Visual Basic DeleteSetting method.
            </summary>
            <param name="application">Application name.</param>
            <param name="section">Registry section.</param>
            <param name="key">Registry key</param>
        </member>
        <member name="M:Development.Materia.VisualBasic.Format(System.Object,System.String)">
            <summary>
            Works like built-in Visual Basic Format function.
            </summary>
            <param name="value">Value to be formatted.</param>
            <param name="format">Format pattern.</param>
            <returns>String formatted based on the specified value and pattern.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.GetSetting(System.String,System.String,System.String)">
            <summary>
            Works like Visual Basic GetSetting method.
            </summary>
            <param name="application">Application name.</param>
            <param name="section">Registry section.</param>
            <param name="key">Registry key.</param>
            <returns>Value of the specified registry key.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.GetSetting(System.String,System.String,System.String,System.Object)">
            <summary>
            Works like Visual Basic GetSetting method.
            </summary>
            <param name="application">Application name.</param>
            <param name="section">Registry section.</param>
            <param name="key">Registry key.</param>
            <param name="defaultvalue">Default value to return if registry key is not existing.</param>
            <returns>Value of the specified registry key.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.InputBox(System.String)">
            <summary>
            Mimics Visual Basic InputBox method.
            </summary>
            <param name="prompt">Dialog notification message.</param>
            <returns>User-input value.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.InputBox(System.String,System.String)">
            <summary>
            Mimics Visual Basic InputBox method.
            </summary>
            <param name="prompt">Dialog notification message.</param>
            <param name="title">Dialog title.</param>
            <returns>User-input value.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.InputBox(System.String,System.String,System.String)">
            <summary>
            Mimics Visual Basic InputBox method.
            </summary>
            <param name="prompt">Dialog notification message.</param>
            <param name="title">Dialog title.</param>
            <param name="defaultresponse">Dialog's default return value if user does not enter any.</param>
            <returns>User-input value.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.InputBox(System.String,System.String,System.String,System.Int32)">
            <summary>
            Mimics Visual Basic InputBox method.
            </summary>
            <param name="prompt">Dialog notification message.</param>
            <param name="title">Dialog title.</param>
            <param name="defaultresponse">Dialog's default return value if user does not enter any.</param>
            <param name="x">Position of the dialog horizontally.</param>
            <returns>User-input value.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Mimics Visual Basic InputBox method.
            </summary>
            <param name="prompt">Dialog notification message.</param>
            <param name="title">Dialog title.</param>
            <param name="defaultresponse">Dialog's default return value if user does not enter any.</param>
            <param name="x">Position of the dialog horizontally.</param>
            <param name="y">Position of the dialog vertically.</param>
            <returns>User-input value.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.IsDate(System.Object)">
            <summary>
            Works like Visual Basic IsDate method.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>True if value is a valid date otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.IsArray(System.Object)">
            <summary>
            Works like Visual Basic IsArray method.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>True if value is an array otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.IsDBNull(System.Object)">
            <summary>
            Works like Visual Basic IsDBNull method.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>True if value is equivalent to DBNull.Value otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.IsNumeric(System.Object)">
            <summary>
            Works like Visual Basic IsNumeric method.
            </summary>
            <param name="value">Value to evaluate.</param>
            <returns>True if value is a number otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.MonthName(System.Int32)">
            <summary>
            Works like Visual Basic MonthName method.
            </summary>
            <param name="month">Month number in the calendar</param>
            <returns>Month name</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.MonthName(System.Int32,System.Boolean)">
            <summary>
            Works like Visual Basic MonthName method.
            </summary>
            <param name="month">Month number in the calendar</param>
            <param name="abbreviate">A value that determines whether to abbreviate the output or not.</param>
            <returns>Month name</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.SaveSetting(System.String,System.String,System.String,System.Object)">
            <summary>
            Works like Visual Basic SaveSetting method.
            </summary>
            <param name="application">Application name.</param>
            <param name="section">Registry section.</param>
            <param name="key">Registry key.</param>
            <param name="value">Value to store in the registry.</param>
        </member>
        <member name="M:Development.Materia.VisualBasic.WeekDayName(System.Int32)">
            <summary>
             Works like Visual Basic WeekDayname method.
            </summary>
            <param name="day">Day of the week.</param>
            <returns>Week day name</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.WeekDayName(System.Int32,System.Boolean)">
            <summary>
            Works like Visual Basic WeekDayname method.
            </summary>
            <param name="day">Day of the week.</param>
            <param name="abbreviate">A value that determines whether to abbreviate the output or not.</param>
            <returns>Week day name</returns>
        </member>
        <member name="M:Development.Materia.VisualBasic.WeekDayName(System.Int32,System.Boolean,Development.Materia.FirstDayOfWeek)">
            <summary>
            Works like Visual Basic WeekDayname method.
            </summary>
            <param name="day">Day of the week.</param>
            <param name="abbreviate">A value that determines whether to abbreviate the output or not.</param>
            <param name="firstdayofweek">A value to determines to what day the week should start.</param>
            <returns>Week day name</returns>
        </member>
        <member name="T:Development.Materia.Cryptography.Cryptographer">
            <summary>
            Cryptographic service providing class.
            </summary>
        </member>
        <member name="M:Development.Materia.Cryptography.Cryptographer.Decrypt(System.String,System.String)">
            <summary>
            Gets the decrypted string value deciphered using the supplied encryption key pattern.
            </summary>
            <param name="value">Value to decrypt</param>
            <param name="key">Encryption key pattern string</param>
            <returns>Returns a more readable string value of the specified encrypted text using the specified key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Cryptography.Cryptographer.Decrypt(System.String,System.String,System.Boolean)">
            <summary>
            Returns decrypted string value deciphered using the supplied encryption key pattern.
            </summary>
            <param name="value">Value to decrypt</param>
            <param name="key">Encryption key pattern string</param>
            <param name="usesimpledecryption">Use simple decryption or not</param>
            <returns>Returns a more readable string value of the specified encrypted text using the specified key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Cryptography.Cryptographer.Encrypt(System.String,System.String)">
            <summary>
            Returns encrypted string value of the specified string using the supplied encryption key pattern.
            </summary>
            <param name="value">Value to encrypt</param>
            <param name="key">Encryption key pattern string</param>
            <returns>Returns a non-human-readable text derived from the specified string value and key pattern.</returns>
        </member>
        <member name="M:Development.Materia.Cryptography.Cryptographer.Encrypt(System.String,System.String,System.Boolean)">
            <summary>
            Returns encrypted string value of the specified string using the supplied encryption key pattern.
            </summary>
            <param name="value">Value to encrypt</param>
            <param name="key">Encryption key pattern string</param>
            <param name="usesimpleencryption">Use simple encryption or not</param>
            <returns>Returns a non-human-readable text derived from the specified string value and key pattern.</returns>
        </member>
        <member name="T:Development.Materia.Controls.RequiredFieldMarker">
            <summary>
            Control extender for marking input controls with a tiny indicator.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.#ctor">
            <summary>
            Creates a new instance of RequiredFieldMarker.
            </summary>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.CanExtend(System.Object)">
            <summary>
            Validates if evaluated control is supported by RequiredFieldMarker.
            </summary>
            <param name="extendee">Object to evaluate.</param>
            <returns>True if the specified object is supported otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.ControlIsRequired(System.Windows.Forms.Control)">
            <summary>
            Returns whether the specified control is marked as required using the RequiredFieldMarker.
            </summary>
            <param name="control">Control to evaluate.</param>
            <returns>True if the control is already marked as required field otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.GetRequired(System.Windows.Forms.Control)">
            <summary>
            Gets required field indicator's presence for this control.
            </summary>
            <param name="control">Control to evaluate.</param>
            <returns>True if the specified control is already marked as a required field otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.GetRequiredIndicatorColor(System.Windows.Forms.Control)">
            <summary>
            Gets required field indicator's fill color.
            </summary>
            <param name="control">Control to evaluate.</param>
            <returns>Control's attached required field indicator's color.</returns>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.IsRequired(System.Windows.Forms.Control)">
            <summary>
            Gets whether control was marked as required or not.
            </summary>
            <param name="control">Control to evalulate.</param>
            <returns>True if control is already marked as a required field otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Collections.Generic.List{System.Windows.Forms.Control})">
            <summary>
            Sets aor unsets each of the specified controls with a rquired field indicator.
            </summary>
            <param name="controls">List of controls to set  / unset.</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Collections.Generic.List{System.Windows.Forms.Control},System.Boolean)">
            <summary>
            Sets aor unsets each of the specified controls with a rquired field indicator.
            </summary>
            <param name="controls">List of controls to set  / unset.</param>
            <param name="required">Determines whether to place a mark or not</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Windows.Forms.Control[])">
            <summary>
            Sets and attaches each of the specified controls with a rquired field indicator.
            </summary>
            <param name="controls">Controls to mark as required fields.</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Windows.Forms.Control)">
            <summary>
            Sets a control with a required field indicator.
            </summary>
            <param name="control">Control to be mark with</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Windows.Forms.Control,System.Boolean)">
            <summary>
             Sets or unsets a control with a required field indicator.
            </summary>
            <param name="control">Control to be mark / unmark with</param>
            <param name="required">Determines whether to place a mark or not</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetAsRequired(System.Windows.Forms.Control,System.Drawing.Color)">
            <summary>
            Sets a control with a required field indicator in the specified position within the control's bounds.
            </summary>
            <param name="control">Control to be mark with</param>
            <param name="color">Required field indicator's fill color</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetRequired(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets required field indicator's presence for this control.
            </summary>
            <param name="control">Control to set or unset as a required field.</param>
            <param name="required">A value that determines whether the control is a required field or not.</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.SetRequiredIndicatorColor(System.Windows.Forms.Control,System.Drawing.Color)">
            <summary>
            Sets required field indicator's fill color.
            </summary>
            <param name="control">Control to evaluate.</param>
            <param name="color">Required field indicator marker's color.</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.UpdateIndicators(System.Windows.Forms.Control)">
            <summary>
            Updates 'required' marked control just in case there is a repainting of the marked control and
            the indicator attached to it needs to be repositioned and redrawn also.
            </summary>
            <param name="control">Control to be updated and redrawn.</param>
        </member>
        <member name="M:Development.Materia.Controls.RequiredFieldMarker.UpdateIndicators">
            <summary>
            Updates 'required' marked controls just in case there is a repainting of each marked control(s) and
            the indicator(s) attached to it needs to be repositioned and redrawn also.
            </summary>
        </member>
        <member name="P:Development.Materia.Controls.RequiredFieldMarker.AdditionalSupportedControls">
            <summary>
            Gets the global lists of additional supported control names for the RequiredFieldMarker.
            </summary>
        </member>
        <member name="P:Development.Materia.Controls.RequiredFieldMarker.IndicatorPosition">
            <summary>
            Gets or sets required field indicator's position within the control's bounds.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.MailHostEnum">
            <summary>
            Mail servers
            </summary>
        </member>
        <member name="F:Development.Materia.Net.MailHostEnum.CustomMail">
            <summary>
            Custom assigned mail server address
            </summary>
        </member>
        <member name="F:Development.Materia.Net.MailHostEnum.Gmail">
            <summary>
            Mail server : smtp.gmail.com
            </summary>
        </member>
        <member name="F:Development.Materia.Net.MailHostEnum.YahooMail">
            <summary>
            Mail server : smtp.mail.yahoo.com
            </summary>
        </member>
        <member name="F:Development.Materia.Net.MailHostEnum.FMS">
            <summary>
            Mail server : mail.fms.com.ph
            </summary>
        </member>
        <member name="F:Development.Materia.Net.MailHostEnum.None">
            <summary>
            Nothing
            </summary>
        </member>
        <member name="T:Development.Materia.Net.Email">
            <summary>
            Class for sending emails (supports gmail and yahoo mail).
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(System.String)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="host">Mail server hostname</param>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="host">Mail server hostname</param>
            <param name="uid">Mail account user id</param>
            <param name="pwd">Mail account password</param>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="host">Mail server hostname</param>
            <param name="port">Mail server port number</param>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="host">Mail server hostname</param>
            <param name="port">Mail server port number</param>
            <param name="uid">Mail account user id</param>
            <param name="pwd">Mail account password</param>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(Development.Materia.Net.MailHostEnum)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="mailhost">Predefined mail server. Value should not be a CustomMail</param>
        </member>
        <member name="M:Development.Materia.Net.Email.#ctor(Development.Materia.Net.MailHostEnum,System.String,System.String)">
            <summary>
            Creates a new instance of Email.
            </summary>
            <param name="mailhost">Predefined mail server. Value should not be a CustomMail</param>
            <param name="uid">Mail account user id</param>
            <param name="pwd">Mail account password</param>
        </member>
        <member name="M:Development.Materia.Net.Email.BeginSend">
            <summary>
            Calls the Send method and run it asynchronously. Must call the EndSend method once IAsynResult is finish.
            </summary>
            <returns>System.IAsyncResult generated from an invoked Send method asynchronization.</returns>
        </member>
        <member name="M:Development.Materia.Net.Email.EndSend(System.IAsyncResult)">
            <summary>
            Finalized the BeginSend call using its produced IAsynResult interface.
            </summary>
            <param name="result">System.IAsyncResult generated from an BeginSend method.</param>
        </member>
        <member name="M:Development.Materia.Net.Email.Send">
            <summary>
            Attempts to send the email.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Email.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Email.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Net.Email.Attachments">
            <summary>
            Gets the email's file attachment information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.BCC">
            <summary>
            Gets email's blind carbon copy recipient(s) information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Body">
            <summary>
            Gets or sets email's message contents.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.CC">
            <summary>
            Gets email's carbon copy recipient(s) information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Credentials">
            <summary>
            Gets or sets mail account login credentials.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.EnableSSL">
            <summary>
            Gets or sets whether mail server's SSL will be enabled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.ErrorMessage">
            <summary>
            Gets the error message of the last failed email sending attempt.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.From">
            <summary>
            Gets or sets email sender's information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Host">
            <summary>
            Gets or sets mail server hostname.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.InnerException">
            <summary>
            Gets the inner exception details of the last failed email sending attempt. 
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.IsBodyHtml">
            <summary>
            Gets or sets whether email message body will be threated as an html or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Port">
            <summary>
            Gets or sets mail server port number.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Sent">
            <summary>
            Gets whether last email sending attempt is successfully sent or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.Subject">
            <summary>
            Gets or sets the email's title. 
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.To">
            <summary>
            Gets email recipient(s) information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Email.UseDefaultCredentials">
            <summary>
            Gets or sets whether default network credentials shall be use to log on to the mail server or not.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.MailAttachmentCollection">
            <summary>
            Derived class for email file attachments.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.#ctor(Development.Materia.Net.Email)">
            <summary>
            Creates a new instance of MailAttachmentCollection.
            </summary>
            <param name="email">Parent email object</param>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Add(System.Net.Mail.Attachment)">
            <summary>
            Adds a file attachment in the collection.
            </summary>
            <param name="attachment">Email attachment</param>
            <returns>Index of the mail attachment in the collection.</returns>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Add(System.String)">
            <summary>
            Adds a file attachment in the collection.
            </summary>
            <param name="filename">Path of the email attachment.</param>
            <returns>System.Net.Mail.Attachment object that corresponds to the newly added mail attachment in the collection.</returns>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Contains(System.Net.Mail.Attachment)">
            <summary>
             Validates whether the specified file is currently existing within the collection.
            </summary>
            <param name="attachment">System.Net.Mail.Attachment object to evaluate.</param>
            <returns>True if mail attachment exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Remove(System.Net.Mail.Attachment)">
            <summary>
            Removes the specified email attachment within the collection.
            </summary>
            <param name="attachment">System.Net.Mail.Attachment object to remove.</param>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.MailAttachmentCollection.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Net.MailAttachmentCollection.Item(System.Int32)">
            <summary>
            Gets or sets file attachment in the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Net.MailAttachmentCollection.Email">
            <summary>
            Gets the parent email for the current mail attachments.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.Database">
            <summary>
            Database-related class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.Database.BeginTryConnect(System.String)">
            <summary>
            Returns a asynchronization of the CanConnect function. Result can then be returned by calling EndTryConnect after the asynchronization is completed.
            </summary>
            <param name="connectionstring">Database connection string.</param>
            <returns>System.IAsyncResult generated from the CanConnect asynchronization.</returns>
        </member>
        <member name="M:Development.Materia.Database.Database.BeginTryConnect(System.Data.IDbConnection)">
            <summary>
            Returns a asynchronization of the CanConnect function. Result can then be returned by calling EndTryConnect after the asynchronization is completed.
            </summary>
            <param name="connection">Database connection object.</param>
            <returns>System.IAsyncResult generated from the CanConnect asynchronization.</returns>
        </member>
        <member name="M:Development.Materia.Database.Database.CanConnect(System.String)">
            <summary>
            Returns whether a database connection can be established using the specified database connection string
            </summary>
            <param name="connectionstring">Database connection string</param>
            <returns>True if a database connection can be established otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.Database.CanConnect(System.Data.IDbConnection)">
            <summary>
            Returns whether a database connection can be established using the specified database connection object.
            </summary>
            <param name="connection">Database connection object.</param>
            <returns>True if a database connection can be established otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.Database.CreateConnection(System.String)">
            <summary>
            Creates a generic database connection using the specified database connection string
            </summary>
            <param name="connectionstring">Database connection string</param>
            <returns>System.Data.IDbConnection created from the specified database connection string.</returns>
        </member>
        <member name="M:Development.Materia.Database.Database.EndTryConnect(System.IAsyncResult)">
            <summary>
            Returns whether a database connection can be established using the specified database connection string thru the specified synchronization result.
            </summary>
            <param name="result">Synchronization result from invoked BeginTryConnect method</param>
            <returns>True if a database connection can be established otherwise false.</returns>
        </member>
        <member name="P:Development.Materia.Database.Database.DatabaseDriver">
            <summary>
            Gets or sets the globally used database driver for the Database class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Database.DatabaseProvider">
            <summary>
            Gets or sets the globally used database provider for the Database class.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Database.DefaultConnectionString">
            <summary>
            Gets or sets the globally used default database connection string pattern.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.Database.LastInsertIdCall">
            <summary>
            Gets or sets how the auto-incremented header primary key value is called using the current database.
            </summary>
        </member>
        <member name="T:Development.Materia.Archiver">
            <summary>
            Creates a new instance of Archiver.
            </summary>
        </member>
        <member name="M:Development.Materia.Archiver.#ctor">
            <summary>
            Creates a new instance of Archiver.
            </summary>
        </member>
        <member name="M:Development.Materia.Archiver.#ctor(System.String)">
            <summary>
            Creates a new instance of Archiver.
            </summary>
            <param name="path">Path of the file or directory to compress</param>
        </member>
        <member name="M:Development.Materia.Archiver.#ctor(System.String,Development.Materia.ArchivingToolEnum)">
            <summary>
            Creates a new instance of Archiver.
            </summary>
            <param name="path">Path of the file or directory to compress</param>
            <param name="archivingtool">Archiving tool use</param>
        </member>
        <member name="M:Development.Materia.Archiver.#ctor(System.String,Development.Materia.ArchivingToolEnum,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Creates a new instance of Archiver.
            </summary>
            <param name="path">Path of the file or directory to compress</param>
            <param name="archivingtool">Archiving tool use</param>
            <param name="processwindowstyle">Command prompt window visibility upon compression</param>
        </member>
        <member name="M:Development.Materia.Archiver.#ctor(System.String,Development.Materia.ArchivingToolEnum,System.Diagnostics.ProcessWindowStyle,Development.Materia.ArchivingMethodEnum)">
            <summary>
            Creates a new instance of Archiver.
            </summary>
            <param name="path">Path of the file or directory to compress</param>
            <param name="archivingtool">Archiving tool use</param>
            <param name="processwindowstyle">Command prompt window visibility upon compression</param>
            <param name="archivingmethod">Archiving method to use</param>
        </member>
        <member name="M:Development.Materia.Archiver.Archive">
            <summary>
            Perform file / directory compression.
            </summary>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Archiver 01" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Archiver 01" language="vbnet" />
            </example> 
        </member>
        <member name="M:Development.Materia.Archiver.CompressAdd(System.String)">
            <summary>
             Performs file compression using selected archiving tool, file(s) will just be copied into the archive file.
            </summary>
            <param name="path">File / directory path to archive</param>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Archiver 02" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Archiver 01" language="vbnet" />
            </example> 
        </member>
        <member name="M:Development.Materia.Archiver.CompressAdd(System.String,Development.Materia.ArchivingToolEnum)">
            <summary>
             Performs file compression using selected archiving tool, file(s) will just be copied into the archive file.
            </summary>
            <param name="path">File / directory path to archive</param>
            <param name="archivingtool">Archiving tool to use</param>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Archiver 03" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Archiver 03" language="vbnet" />
            </example> 
        </member>
        <member name="M:Development.Materia.Archiver.CompressInsert(System.String)">
            <summary>
             Performs file compression using selected archiving tool, file(s) will be inserted directly to the archive file.
            </summary>
            <param name="path">File / directory path to archive</param>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Archiver 04" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Archiver 04" language="vbnet" />
            </example> 
        </member>
        <member name="M:Development.Materia.Archiver.CompressInsert(System.String,Development.Materia.ArchivingToolEnum)">
            <summary>
             Performs file compression using selected archiving tool, file(s) will be inserted directly to the archive file.
            </summary>
            <param name="path">File / directory path to archive</param>
            <param name="archivingtool">Archiving tool to use</param>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <summary>
             Performs file compression using selected archiving tool, file(s) will be inserted directly to the archive file.
            </summary>
            <param name="path">File / directory path to archive</param>
            <returns>A System.IO.FileInfo object that contains the archived output file information. Returns nothing if error has been encountered during archive routines.</returns>
            <example>
            <code source="..\Development.Materia\Examples\Example.cs" region="Archiver 05" language="cs" />
            <code source="..\Development.Materia\Development.Materia.VBExamples\Development.Materia.VBExamples\Example.vb" region="Archiver 05" language="vbnet" />
            </example> 
        </member>
        <member name="M:Development.Materia.Archiver.Decompress(System.String)">
            <summary>
             Performs file extraction from a compressed file into the specified destination folder using the selected archiving tool.
            </summary>
            <param name="filename">Compressed file's filename</param>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Decompress(System.String,System.String)">
            <summary>
             Performs file extraction from a compressed file into the specified destination folder using the selected archiving tool.
            </summary>
            <param name="filename">Compressed file's filename</param>
            <param name="destination">Destination path for the extracted file(s)</param>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Decompress(System.String,Development.Materia.ArchivingToolEnum)">
            <summary>
            Performs file extraction from a compressed file into the specified destination folder using the selected archiving tool.
            </summary>
            <param name="filename">Compressed file's filename</param>
            <param name="archivingtool">Archiving tool to use</param>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Decompress(System.String,System.String,Development.Materia.ArchivingToolEnum)">
            <summary>
             Performs file extraction from a compressed file into the specified destination folder using the selected archiving tool.
            </summary>
            <param name="filename">Compressed file's filename</param>
            <param name="destination">Destination path for the extracted file(s)</param>
            <param name="archivingtool">Archiving tool to use</param>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Extract">
            <summary>
            Performs archive extraction using the chosen archiving tool.
            </summary>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Extract(System.String)">
            <summary>
            Performs archive extraction using the chosen archiving tool.
            </summary>
            <param name="destination">Destination path for the extracted file(s)</param>
            <returns>A boolean value that determines whether file extraction was successful or not.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.SevenZ(System.String)">
            <summary>
            Runs the integrated 7z archiver with the specified command line arguments.
            </summary>
            <param name="commandlineargs">Command line arguments</param>
            <returns>Returns true if operation is successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.WinRar(System.String)">
            <summary>
            Runs the integrated WinRar archiver with the specified command line arguments.
            </summary>
            <param name="commandlineargs">Command line arguments</param>
            <returns>Returns true if operation is successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Archiver.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Archiver.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.Archiver.ArchivedPath">
            <summary>
             Gets archive's path after successful compression.
            </summary>
        </member>
        <member name="P:Development.Materia.Archiver.ArchivingMethod">
            <summary>
            Gets or sets archiving method.
            </summary>
        </member>
        <member name="P:Development.Materia.Archiver.ArchivingTool">
            <summary>
            Gets or sets compression tool to use.
            </summary>
        </member>
        <member name="P:Development.Materia.Archiver.Path">
            <summary>
            Gets or sets file's / directory's path to compress.
            </summary>
        </member>
        <member name="P:Development.Materia.Archiver.ProcessWindowStyle">
            <summary>
            Gets or sets command prompt's window status upon compression.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.QueryGenerator">
            <summary>
            Sql statement generaing class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.QueryGenerator.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of QueryGenerator.
            </summary>
            <param name="table">System.Data.DataTable to eveluate</param>
        </member>
        <member name="M:Development.Materia.Database.QueryGenerator.ToString">
            <summary>
            Returns the generated sql statement based on the current hosted DataTable object's row values and states.
            </summary>
            <returns>Sql statement generated from th specified table's modifications.</returns>
        </member>
        <member name="P:Development.Materia.Database.QueryGenerator.ExcludedFields">
            <summary>
            Gets the list of the current evaluated table's field that will be excluded from the sql statement generation.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueryGenerator.ForeignKey">
            <summary>
            Gets the foreign key information affixed to the current evaluated table.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueryGenerator.PrimaryKey">
            <summary>
            Gets the primary key information affixed to the current evaluated table.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.QueryGenerator.Table">
            <summary>
            Gets the current evaluated table to where the sql statements will be produced.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.ExcludedDataSourceFieldCollection">
            <summary>
            List of QueryGenerator's excluded fields.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.ExcludedDataSourceFieldCollection.#ctor(Development.Materia.Database.QueryGenerator)">
            <summary>
            Creates a new instance of ExcludedDataSourceFieldCollection.
            </summary>
            <param name="generator">Development.Materia.Database.QueryGenerator that owne the class.</param>
        </member>
        <member name="M:Development.Materia.Database.ExcludedDataSourceFieldCollection.Add(System.String)">
            <summary>
            Adds a execluded data source field name into the collection.
            </summary>
            <param name="field">Table's field name</param>
            <returns>Index of the newly added field within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.ExcludedDataSourceFieldCollection.Add(System.String[])">
            <summary>
            Adds a range of excluded data source field names into the collection.
            </summary>
            <param name="fields">Table's field names.</param>
            <returns>List of the indexes of each newly added field within the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.ExcludedDataSourceFieldCollection.Contains(System.String)">
            <summary>
            Returns whether the specified field name already exists in the collection.
            </summary>
            <param name="field">Table field name to evaluate.</param>
            <returns>True if the field name already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.ExcludedDataSourceFieldCollection.Remove(System.String)">
            <summary>
            Removes the specified field name from the collection.
            </summary>
            <param name="field">Table field name to remove.</param>
        </member>
        <member name="P:Development.Materia.Database.ExcludedDataSourceFieldCollection.Item(System.Int32)">
            <summary>
            Gets the current excluded field name at the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Database.ExcludedDataSourceFieldCollection.Generator">
            <summary>
            Gets the current hosted sql statement generator.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.ForeignKeyInfo">
            <summary>
            Data source foreign key information.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.PrimaryKeyInfo">
            <summary>
            Data source primary key information.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.PrimaryKeyInfo.#ctor(Development.Materia.Database.QueryGenerator)">
            <summary>
            Creates a new instance of PrimaryKeyInfo.
            </summary>
            <param name="generator">Development.Materia.Database.QueryGenerator that owns the current class.</param>
        </member>
        <member name="M:Development.Materia.Database.PrimaryKeyInfo.#ctor(Development.Materia.Database.QueryGenerator,System.String,System.String)">
            <summary>
            Creates a new instance of PrimaryKeyInfo.
            </summary>
            <param name="generator">Development.Materia.Database.QueryGenerator that owns the current class.</param>
            <param name="field">Table's field name.</param>
            <param name="value">Field's assigned value.</param>
        </member>
        <member name="P:Development.Materia.Database.PrimaryKeyInfo.Field">
            <summary>
            Gets or sets the key field name.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.PrimaryKeyInfo.Generator">
            <summary>
            Gets the current hosted query generator.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.PrimaryKeyInfo.Value">
            <summary>
            Gets or sets the affixed value for the current generator's key field. Assigned value should already be in sql-qualified format.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.ForeignKeyInfo.#ctor(Development.Materia.Database.QueryGenerator)">
            <summary>
            Creates a new instance of ForeignKeyInfo.
            </summary>
            <param name="generator">Development.Materia.Database.QueryGenerator that owns the current class.</param>
        </member>
        <member name="M:Development.Materia.Database.ForeignKeyInfo.#ctor(Development.Materia.Database.QueryGenerator,System.String,System.String)">
            <summary>
            Creates a new instance of ForeignKeyInfo.
            </summary>
            <param name="generator">Development.Materia.Database.QueryGenerator that owns the current class.</param>
            <param name="field">Table's field name.</param>
            <param name="value">Field's assigned value.</param>
        </member>
        <member name="P:Development.Materia.Database.ForeignKeyInfo.HeaderPrimaryKey">
            <summary>
            Gets or sets the currented header table's reference primary key field name.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.ForeignKeyInfo.HeaderTable">
            <summary>
            Gets or sets the current parented header table for the header-detail key referencing.
            </summary>
        </member>
        <member name="T:Development.Materia.EdiFile">
            <summary>
            Electronic data interchange file class.
            </summary>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="encryptionkey">Encryption key</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="contents">Encrypted or decrypted file contents</param>
            <param name="encryptionkey">Encryption key</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database retrieving command statement</param>
            <param name="encryptionkey">Encryption key</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.Data.IDbConnection,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="connection">Database connection object</param>
            <param name="sql">Database retrieving command statement</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="connection">Database connection object</param>
            <param name="sql">Database retrieving command statement</param>
            <param name="encryptionkey">Encryption key</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.Data.DataTable)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="table">Data source object to be encrypted</param>
        </member>
        <member name="M:Development.Materia.EdiFile.#ctor(System.String,System.Data.DataTable,System.String)">
            <summary>
            Creates a new instance of EdiFile.
            </summary>
            <param name="filename">File to be encrypted or decrypted</param>
            <param name="table">Data source object to be encrypted</param>
            <param name="encryptionkey">Encryption key</param>
        </member>
        <member name="M:Development.Materia.EdiFile.DecryptFromFile(System.String)">
            <summary>
            Gets the decrypted file's contents using the supplied encryption key.
            </summary>
            <param name="filename">File to decrypt</param>
            <returns>Decrypted file's contents. Returns an empty string if decryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.DecryptFromFile(System.String,System.String)">
            <summary>
            Gets the decrypted file's contents using the supplied encryption key.
            </summary>
            <param name="filename">File to decrypt</param>
            <param name="encryptionkey">Encryption key</param>
            <returns>Decrypted file's contents. Returns an empty string if decryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.String)">
            <summary>
            Encrypts the specified contents into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="contents">File contents to encrypt</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.String,System.String)">
            <summary>
            Encrypts the specified contents into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="contents">File contents to encrypt</param>
            <param name="encryptionkey">Encryption key</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.String,System.String,System.String)">
            <summary>
            Encrypts data retrieved using the specified database connection and command statement into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="connectionstring">Database connection string</param>
            <param name="sql">Database command statement</param>
            <param name="encryptionkey">Encryption key</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.Data.IDbConnection,System.String)">
            <summary>
            Encrypts data retrieved using the specified database connection and command statement into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="connection">Database connection object</param>
            <param name="sql">Database command statement</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Encrypts data retrieved using the specified database connection and command statement into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="connection">Database connection object</param>
            <param name="sql">Database command statement</param>
            <param name="encryptionkey">Encryption key</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.Data.DataTable)">
            <summary>
            Encrypts the specified DataTable object's contents into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="table">DataTable object to encrypt</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.EncryptToFile(System.String,System.Data.DataTable,System.String)">
            <summary>
            Encrypts the specified DataTable object's contents into a file using the supplied encryption key.
            </summary>
            <param name="filename">File path to put in the encrypted contents</param>
            <param name="table">DataTable object to encrypt</param>
            <param name="encryptionkey">Encryption key</param>
            <returns>System.IO.FileInfo object that corresponds the encrypted file's information. Returns nothing if encryption process fails.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.Read">
            <summary>
            Loads the decrypted contents of the initialiazed encrypted file.
            </summary>
        </member>
        <member name="M:Development.Materia.EdiFile.Write">
            <summary>
            Writes the encrypted file initialized contents into the specified file.
            </summary>
            <returns>System.IO.FileInfo object that corresponds the written file's information. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="M:Development.Materia.EdiFile.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.EdiFile.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.EdiFile.Contents">
            <summary>
            Gets the decrypted file's contents.
            </summary>
        </member>
        <member name="P:Development.Materia.EdiFile.EncryptionKey">
            <summary>
            Encryption key to used for encryption or decryption of the file.
            </summary>
        </member>
        <member name="P:Development.Materia.EdiFile.Filename">
            <summary>
            Gets the file to be written or to read the contents from.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.CommandParser">
            <summary>
            SQL command statement parsing class.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.CommandParser.#ctor(Development.Materia.Database.Que)">
            <summary>
            Creates a new instance of CommandParser.
            </summary>
            <param name="que">Development.Materia.Database.Que that holds the Sqlcommand statement.</param>
        </member>
        <member name="P:Development.Materia.Database.CommandParser.CommandStatements">
            <summary>
            Gets the current lists of evaluated command statements based on the associated Que object.
            </summary>
        </member>
        <member name="P:Development.Materia.Database.CommandParser.Que">
            <summary>
            Gets the current associated que object for the current command parser.
            </summary>
        </member>
        <member name="T:Development.Materia.Database.CommandStatementCollection">
            <summary>
            Collection of database command statements.
            </summary>
        </member>
        <member name="M:Development.Materia.Database.CommandStatementCollection.#ctor(Development.Materia.Database.CommandParser)">
            <summary>
            Creates a new instance of CommandStatementCollection.
            </summary>
            <param name="parser">Development.Materia.Database.CommandParser that owns the current collection.</param>
        </member>
        <member name="M:Development.Materia.Database.CommandStatementCollection.Add(System.String)">
            <summary>
            Adds a new command statement into the collection.
            </summary>
            <param name="sql">SQL statement</param>
            <returns>Index of the SQL statement in the collection.</returns>
        </member>
        <member name="M:Development.Materia.Database.CommandStatementCollection.Contains(System.String)">
            <summary>
             Validates whether the specified sql command statement already exists in the collection or not.
            </summary>
            <param name="sql">SQL statement to evaluate</param>
            <returns>True if the specified SQL statement already exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Database.CommandStatementCollection.Remove(System.String)">
            <summary>
            Removes the specified command statement from the collection.
            </summary>
            <param name="sql">SQL statement to remove.</param>
        </member>
        <member name="M:Development.Materia.Database.CommandStatementCollection.ToString">
            <summary>
            Gets the SQL strings stored in the collection.
            </summary>
            <returns>SQL strings stored in the collection.</returns>
        </member>
        <member name="P:Development.Materia.Database.CommandStatementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the command statement at the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Database.CommandStatementCollection.Parser">
            <summary>
            Gets the CommandParser object associated with the collection class.
            </summary>
        </member>
        <member name="T:Development.Materia.IniFile">
            <summary>
            Ini file reader and writer.
            </summary>
        </member>
        <member name="M:Development.Materia.IniFile.#ctor(System.String)">
            <summary>
            Creates a new instance of IniReader.
            </summary>
            <param name="filename">INI path</param>
        </member>
        <member name="M:Development.Materia.IniFile.Sections(System.String,System.String)">
            <summary>
            Gets the assigned value of a key within the specified section in the ini file.
            </summary>
            <param name="section">Ini file section.</param>
            <param name="key">Ini file section key</param>
            <returns>Assigned value in the specified Ini file's section key.</returns>
        </member>
        <member name="M:Development.Materia.IniFile.GetKeyValue(System.String,System.String,System.String)">
            <summary>
            Calls the IniFile class' Section property to get an specific key value under the specified section within the specified ini file.
            </summary>
            <param name="filename">Ini file path</param>
            <param name="section">Section in the ini file</param>
            <param name="key">Key to get the value from</param>
            <returns>String value assigned in the INI file's key section.</returns>
        </member>
        <member name="M:Development.Materia.IniFile.SetKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
            Calls the IniFile class' SetValue function to assign a value in the specified key under the specified section of the specified ini file.
            </summary>
            <param name="filename">Ini file's path.</param>
            <param name="section">Ini file section</param>
            <param name="key">Ini file section key</param>
            <param name="value">Key value to assign</param>
            <returns>True if value assignment has been successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            Sets a value in the specified key of the specified section within the ini file's contents.
            </summary>
            <param name="section">Ini file section</param>
            <param name="key">Ini file section key</param>
            <param name="value">Key value to assign</param>
            <returns>True if value assignment has been successful otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.IniFile.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.IniFile.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.IniFile.FileName">
            <summary>
            Gets or sets file to read the settings from.
            </summary>
        </member>
        <member name="T:Development.Materia.DataSourceExcelWriter">
            <summary>
            DataTable and DataSet standalone MS Excel file writer.
            </summary>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.#ctor(System.Data.DataTable)">
            <summary>
            Creates a new instance of DataSourceExcelWriter.
            </summary>
            <param name="datasource">Datasource table to export</param>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Creates a new instance of DataSourceExcelWriter.
            </summary>
            <param name="datasource">Datasource table to export</param>
            <param name="filename">Exporting file path</param>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.#ctor(System.Data.DataSet)">
            <summary>
            Creates a new instance of DataSourceExcelWriter.
            </summary>
            <param name="datasource">Datasource tables to export</param>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.#ctor(System.Data.DataSet,System.String)">
            <summary>
            Creates a new instance of DataSourceExcelWriter.
            </summary>
            <param name="datasource">Datasource tables to export</param>
            <param name="filename">Exporting file path</param>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.Write">
            <summary>
            Writes the current associated data source object into the specified excel path and returns the file's information if data exportation is successful.
            </summary>
            <returns>System.IO.FileInfo object that associates the written excel file derived from the current source table. Returns nothing if error has been encountered during file-writing process.</returns>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.DataSourceExcelWriter.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Development.Materia.DataSourceExcelWriter.DataSource">
            <summary>
            Gets the initialized datasource object to export the contents from.
            </summary>
        </member>
        <member name="P:Development.Materia.DataSourceExcelWriter.FileName">
            <summary>
            Gets or sets the exporting file's path.
            </summary>
        </member>
        <member name="T:Development.Materia.DataSourceExcelWriter.CellStyles">
            <summary>
            Excel spreadsheet cell style enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.DataSourceExcelWriter.CellStyles.Currency">
            <summary>
            Currency represented numeric values.
            </summary>
        </member>
        <member name="F:Development.Materia.DataSourceExcelWriter.CellStyles.DateTime">
            <summary>
            Date and time
            </summary>
        </member>
        <member name="F:Development.Materia.DataSourceExcelWriter.CellStyles.General">
            <summary>
            General types basically strings.
            </summary>
        </member>
        <member name="F:Development.Materia.DataSourceExcelWriter.CellStyles.Number">
            <summary>
            Numeric values.
            </summary>
        </member>
        <member name="F:Development.Materia.DataSourceExcelWriter.CellStyles.ShortDate">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Development.Materia.Net.UploadInvokations">
            <summary>
            Upload event invokation enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadInvokations.EventRaiser">
            <summary>
            Actual upload events.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadInvokations.FileUploadFailedRaiser">
            <summary>
            Upload failure events.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadInvokations.CalculatingFileNrRaiser">
            <summary>
            Upload calculation events.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.UploadTransitions">
            <summary>
            Upload transition enumerations.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.CalculationFileSizesStarted">
            <summary>
            While trying to calculate total size of upload file.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.FileSizesCalculationComplete">
            <summary>
            After upload file size has been determined.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.DeletingFileAfterUpload">
            <summary>
            Upload file deletion after successful upload process.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.DeletingFilesAfterCancel">
            <summary>
            Upload file deletion when process has been cancelled.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.FileUploadAttempting">
            <summary>
            Attempting to communicate with the upload server.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.FileUploadStarted">
            <summary>
             File upload has been started.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.FileUploadStopped">
            <summary>
            File upload has been terminated.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.FileUploadSucceeded">
            <summary>
            File upload finished successfully.
            </summary>
        </member>
        <member name="F:Development.Materia.Net.UploadTransitions.ProgressChanged">
            <summary>
            File upload is progressing.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.Uploader">
            <summary>
            FTP uploder class with progress reporting features.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.#ctor(System.String)">
            <summary>
            Creates a new instance of Uploader.
            </summary>
            <param name="address">Uploading FTP address</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of Uploader.
            </summary>
            <param name="address">Uploading FTP address</param>
            <param name="uid">FTP server logon user id</param>
            <param name="pwd">FTP server logon password</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.#ctor(System.String,System.Net.NetworkCredential)">
            <summary>
            Creates a new instance of Uploader.
            </summary>
            <param name="address">Uploading FTP address</param>
            <param name="credential">FTP server logon credential</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnCalculationFileSizesStarted(System.EventArgs)">
            <summary>
            Calls the CalculationFileSizesStarted event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnCancelled(System.EventArgs)">
            <summary>
            Calls the Cancelled event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnCancelRequested(System.EventArgs)">
            <summary>
            Calls the CancelRequested event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnCompleted(System.EventArgs)">
            <summary>
            Calls the Completed event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnCalculatingFileSize(System.Int32)">
            <summary>
            Calls the CalculatingFileSize event.
            </summary>
            <param name="e">Uploading file size.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileUploadAttempting(System.EventArgs)">
            <summary>
            Calls the FileUploadAttempting event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileUploadFailed(System.Exception)">
            <summary>
            Calls the FileUploadFailed event.
            </summary>
            <param name="e">Exception encountered</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileUploadStarted(System.EventArgs)">
            <summary>
            Calls the FileUploadStarted event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileUploadStopped(System.EventArgs)">
            <summary>
            Calls the FileUploadStopped  event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileUploadSucceeded(System.EventArgs)">
            <summary>
            Calls the FileUploadSucceeded event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnFileSizesCalculationComplete(System.EventArgs)">
            <summary>
            Calls the FileSizesCalculationComplete event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnIsBusyChanged(System.EventArgs)">
            <summary>
            Calls the IsBusyChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnIsPausedChanged(System.EventArgs)">
            <summary>
            Calls the IsPausedChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnPaused(System.EventArgs)">
            <summary>
            Calls the Paused event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnProgressChanged(System.EventArgs)">
            <summary>
            Calls the ProgressChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnResumed(System.EventArgs)">
            <summary>
            Calls the Resumed event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnStarted(System.EventArgs)">
            <summary>
            Calls the Started event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnStateChanged(System.EventArgs)">
            <summary>
            Calls the StateChanged event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.OnStopped(System.EventArgs)">
            <summary>
            Calls the Stopped event.
            </summary>
            <param name="e">Base data that contains the event's information.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.FormatSizeBinary(System.Int64)">
            <summary>
            Formats the amount of bytes to a more readible notation with binary notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <returns>Readable notation for the specied value.</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.FormatSizeBinary(System.Int64,System.Int32)">
            <summary>
            Formats the amount of bytes to a more readible notation with binary notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <param name="decimals">The amount of decimals for the notation</param>
            <returns>Readable notation for the specied value.</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.FormatSizeDecimal(System.Int64)">
            <summary>
            Formats the amount of bytes to a more readible notation with decimal notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <returns>Readable notation for the specied value.</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.FormatSizeDecimal(System.Int64,System.Int32)">
            <summary>
            Formats the amount of bytes to a more readible notation with decimal notation symbols
            </summary>
            <param name="size">The raw amount of bytes</param>
            <param name="decimals">The amount of decimals for the notation</param>
            <returns>Readable notation for the specied value.</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.GetCurrentUploadPercentage(System.Int32)">
            <summary>
             Gets the current uploading file progress percentage.
            </summary>
            <param name="decimals">Number of decimals</param>
            <returns>Uploading file progress percentage</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.GetTotalUploadPercentage(System.Int32)">
            <summary>
            Gets the total upload percentage.
            </summary>
            <param name="decimals">Number of decimals</param>
            <returns>Total upload progress percentage.</returns>
        </member>
        <member name="M:Development.Materia.Net.Uploader.SetBusy(System.Boolean)">
            <summary>
            Sets the uploader's busy state.
            </summary>
            <param name="busy">A value that determines whether the Uploader is currently busy or not.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.SetPacketSize(System.Int32)">
            <summary>
            Sets the uploader's allocated packet size block.
            </summary>
            <param name="packets">Maximum upload-speed limit.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.SetPaused(System.Boolean)">
            <summary>
            Sets the current uploader's paused state.
            </summary>
            <param name="paused">A value that determines whether the Uploader is marked as paused or not.</param>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Start">
            <summary>
            Starts the upload process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Pause">
            <summary>
            Pause the upload process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Resume">
            <summary>
            Resumes the upload process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Stop">
            <summary>
            Cancels the currently running upload process.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Dispose">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.Uploader.Dispose(System.Boolean)">
            <summary>
            Dispose off any resources used by the class to free up memory space.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:Development.Materia.Net.Uploader.CalculationFileSizesStarted">
            <summary>
            Occurs when the calculation of the file sizes has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Cancelled">
            <summary>
            Occurs when the file Uploading has been canceled by the user
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.CancelRequested">
            <summary>
            Occurs when the user has requested to cancel the Uploads
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Completed">
            <summary>
            Occurs when the file Uploading has been completed (without canceling it)
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.CalculatingFileSize">
            <summary>
            Occurs when the calculation of the file sizes has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileUploadAttempting">
            <summary>
            Occurs when the FileUploader attempts to get a web response to upload the file.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileUploadFailed">
            <summary>
            Occurs when a file upload has been completed unsuccessfully
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileUploadStarted">
            <summary>
            Occurs when a file upload has started
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileUploadStopped">
            <summary>
            Occurs when a file upload has stopped
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileUploadSucceeded">
            <summary>
            Occurs when a file upload has been completed successfully
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.FileSizesCalculationComplete">
            <summary>
            Occurs when the FileUploader attempts to get a web response to upload the file
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.IsBusyChanged">
            <summary>
            Occurs when the busy state of the FileUploader has changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.IsPausedChanged">
            <summary>
            Occurs when the pause state of the FileUploader has changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Paused">
            <summary>
            Occurs when the file Uploading has been paused.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.ProgressChanged">
            <summary>
            Occurs every time a block of data has been Uploaded
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Resumed">
            <summary>
            Occurs when the file Uploading has been resumed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Started">
            <summary>
            Occurs when the file Uploading has started.
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.StateChanged">
            <summary>
            Occurs when the either the busy or pause state of the FileUploader have changed
            </summary>
        </member>
        <member name="E:Development.Materia.Net.Uploader.Stopped">
            <summary>
            Occurs when the file Uploading has been stopped by either cancellation or completion
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.Address">
            <summary>
            Gets or sets the FTP uploading address.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CanResume">
            <summary>
            Gets whether the uploader can resume the upload process or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CanStart">
            <summary>
            Gets whether the uploader can start a new process or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CanStop">
            <summary>
            Gets whether the uploader can be cancelled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.Credenital">
            <summary>
            Gets or sets the FTP server logon credential information.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CurrentlyUploaded">
            <summary>
            Gets the total bytes uploaded for the current uploading file. To get the overall upload size refer to TotalUploaded value.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CurrentUploadPercentage">
            <summary>
            Gets the current uploading file progress percentage.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.CurrentUploadSize">
            <summary>
            Gets the size of the current uploading file size in bytes.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.IsBusy">
            <summary>
            Gets whether the uploader is currently busy or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.IsCancelled">
            <summary>
            Gets whether the upload process has ben cancelled or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.IsPaused">
            <summary>
            Gets whether the uploader is currently at paused state or not.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.PacketSize">
            <summary>
            Gets the size of the blocks that will be uploaded.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.StopWatchCycle">
            <summary>
            Gets or sets the amount of blocks that need to be uploaded before the progress speed is re-calculated. Note: setting this to a low value might decrease the accuracy of the calculation. Default value is 5.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.SupportsProgress">
            <summary>
            Gets or sets whether the uploader supports progress reports or not. When enabled, uploader will have to make computations of the uploading files before proceeding with the upload process. Default value is set to False.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.TotalUploaded">
            <summary>
            Gets the total amount of bytes being uploaded.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.TotalUploadPercentage">
            <summary>
            Gets the total upload percentage.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.TotalUploadSize">
            <summary>
            Gets the total size of all files together. Correct value will be returned if SupportsProgress is set otherwise returns 0.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.Uploads">
            <summary>
            Gets the lists of upload files.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.Uploader.UploadSpeed">
            <summary>
            Gets the current upload speed in bytes.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.Uploader.FileUploadFailedEventHandler">
            <summary>
            Event handler that is invoked when upload routine fails.
            </summary>
            <param name="sender"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Development.Materia.Net.Uploader.FileSizeCalculationEventHandler">
            <summary>
            Event handler that is invoked upon upload file size calculation routines.
            </summary>
            <param name="sender"></param>
            <param name="filenumber"></param>
        </member>
        <member name="T:Development.Materia.Net.UploadFileInfo">
            <summary>
            Uploaded file information class.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of UploadFileInfo.
            </summary>
            <param name="path">The local path of the file to be uploaded.</param>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfo.ToString">
            <summary>
            Gets the name of the uploaded file.
            </summary>
            <returns>Upload file's name.</returns>
        </member>
        <member name="P:Development.Materia.Net.UploadFileInfo.Name">
            <summary>
            Gets or sets the Uploading file's associated name.
            </summary>
        </member>
        <member name="P:Development.Materia.Net.UploadFileInfo.Path">
            <summary>
            Gets the currently initialized downnloading file's path.
            </summary>
        </member>
        <member name="T:Development.Materia.Net.UploadFileInfoCollection">
            <summary>
            ollection of uploaded file information.
            </summary>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.#ctor(Development.Materia.Net.Uploader)">
            <summary>
            Creates a new instance of UploadFileInfoCollection.
            </summary>
            <param name="uploader">Development.Materia.Net.Uploader object that owns the current collection.</param>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Add(System.String)">
            <summary>
            Adds a new upload file information into the collection.
            </summary>
            <param name="path">Local file path</param>
            <returns>Newly added Development.Materia.Net.UploadFileInfo.</returns>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Add(Development.Materia.Net.UploadFileInfo)">
            <summary>
            Adds a new upload file information into the collection.
            </summary>
            <param name="upload">Upload file information</param>
            <returns>Index of the added Development.Materia.Net.UploadFileInfo in the collection.</returns>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Contains(System.String)">
            <summary>
            Validates whether an specific upload file information with the specified name exists within the collection or not.
            </summary>
            <param name="name">Upload file name.</param>
            <returns>True if a Development.Materia.Net.UploadFileInfo with the specified name already exists within the collecton otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Contains(Development.Materia.Net.UploadFileInfo)">
            <summary>
            Returns whether the specified upload information already exists within the collection or not.
            </summary>
            <param name="upload">Development.Materia.Net.UploadFileInfo to evaluate.</param>
            <returns>True if the specified Development.Materia.Net.UploadFileInfo aready exists within the collection otherwise false.</returns>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Remove(System.String)">
            <summary>
            Removes a certain upload file information with the specified name from the collection.
            </summary>
            <param name="name">Upload file name.</param>
        </member>
        <member name="M:Development.Materia.Net.UploadFileInfoCollection.Remove(Development.Materia.Net.UploadFileInfo)">
            <summary>
             Removes the specified upload file information from the collection.
            </summary>
            <param name="upload">Development.Materia.Net.UploadFileInfo to remove.</param>
        </member>
        <member name="P:Development.Materia.Net.UploadFileInfoCollection.Item(System.Int32)">
            <summary>
            Gets the uloading file information in the specified index of the collection.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Net.UploadFileInfoCollection.Item(System.String)">
            <summary>
            Gets a uploading file information with the specified name within the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Development.Materia.Net.UploadFileInfoCollection.Uploader">
            <summary>
            Gets the current hosted Uploader.
            </summary>
        </member>
        <member name="T:Development.Materia.Action`5">
            <summary>
            Encapsulates a method that has 5 parameters and does not return any value.
            </summary>
            <typeparam name="T1">1st parameter's value type.</typeparam>
            <typeparam name="T2">2nd parameter's value type.</typeparam>
            <typeparam name="T3">3rd parameter's value type.</typeparam>
            <typeparam name="T4">4th parameter's value type.</typeparam>
            <typeparam name="T5">5th parameter's value type.</typeparam>
            <param name="arg1">Invoked method's 1st parameter value.</param>
            <param name="arg2">Invoked method's 2nd parameter value.</param>
            <param name="arg3">Invoked method's 3rd parameter value.</param>
            <param name="arg4">Invoked method's 4th parameter value.</param>
            <param name="arg5">Invoked method's 5th parameter value.</param>
        </member>
        <member name="T:Development.Materia.Action`6">
            <summary>
            Encapsulates a method that has 6 parameters and does not return any value.
            </summary>
            <typeparam name="T1">1st parameter's value type.</typeparam>
            <typeparam name="T2">2nd parameter's value type.</typeparam>
            <typeparam name="T3">3rd parameter's value type.</typeparam>
            <typeparam name="T4">4th parameter's value type.</typeparam>
            <typeparam name="T5">5th parameter's value type.</typeparam>
            <typeparam name="T6">6th parameter's value type.</typeparam>
            <param name="arg1">Invoked method's 1st parameter value.</param>
            <param name="arg2">Invoked method's 2nd parameter value.</param>
            <param name="arg3">Invoked method's 3rd parameter value.</param>
            <param name="arg4">Invoked method's 4th parameter value.</param>
            <param name="arg5">Invoked method's 5th parameter value.</param>
            <param name="arg6">Invoked method's 6th parameter value.</param>
        </member>
        <member name="T:Development.Materia.Func`6">
            <summary>
             Encapsulates a method that has 5 parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="T1">1st parameter's value type.</typeparam>
            <typeparam name="T2">2nd parameter's value type.</typeparam>
            <typeparam name="T3">3rd parameter's value type.</typeparam>
            <typeparam name="T4">4th parameter's value type.</typeparam>
            <typeparam name="T5">5th parameter's value type.</typeparam>
            <typeparam name="TResult">Invoking method's return value type.</typeparam>
            <param name="arg1">Invoked method's 1st parameter value.</param>
            <param name="arg2">Invoked method's 2nd parameter value.</param>
            <param name="arg3">Invoked method's 3rd parameter value.</param>
            <param name="arg4">Invoked method's 4th parameter value.</param>
            <param name="arg5">Invoked method's 5th parameter value.</param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Func`7">
            <summary>
            Encapsulates a method that has 6 parameters and returns a value of the type specified by the TResult parameter.
            </summary>
            <typeparam name="T1">1st parameter's value type.</typeparam>
            <typeparam name="T2">2nd parameter's value type.</typeparam>
            <typeparam name="T3">3rd parameter's value type.</typeparam>
            <typeparam name="T4">4th parameter's value type.</typeparam>
            <typeparam name="T5">5th parameter's value type.</typeparam>
            <typeparam name="T6">6th parameter's value type.</typeparam>
            <typeparam name="TResult">Invoking method's return value type.</typeparam>
            <param name="arg1">Invoked method's 1st parameter value.</param>
            <param name="arg2">Invoked method's 2nd parameter value.</param>
            <param name="arg3">Invoked method's 3rd parameter value.</param>
            <param name="arg4">Invoked method's 4th parameter value.</param>
            <param name="arg5">Invoked method's 5th parameter value.</param>
            <param name="arg6">Invoked method's 6th parameter value.</param>
            <returns></returns>
        </member>
        <member name="T:Development.Materia.Synchronization">
            <summary>
            Synchronization method class.
            </summary>
        </member>
        <member name="M:Development.Materia.Synchronization.EndProgress(System.Object)">
            <summary>
            End the progressing state of a specified progressbar object asynchronously.
            </summary>
            <param name="progressbar">Progress bar object to synchronize</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.IAsyncResult)">
            <summary>
            Synchronizes the specified IAsyncResult object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="result">IAsyncResult to synchronize</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.IAsyncResult,System.Object)">
            <summary>
            Synchronizes the specified IAsyncResult object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="result">IAsyncResult to synchronize</param>
            <param name="progressbar">Synchronization progress bar</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.Threading.Thread)">
            <summary>
            Synchronizes the specified Thread object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="thread">Thread to synchronize</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.Threading.Thread,System.Object)">
            <summary>
            Synchronizes the specified Thread object and suspends all preceeding events until it is already finished.
            </summary>
            <param name="thread">Thread to synchronize</param>
            <param name="progressbar">Synchonization progress bar</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.Object[])">
            <summary>
            Synchronizes all of the specified sync objects and suspends all preceeding events until all of them are finished.
            </summary>
            <param name="syncs">Synchronization objects to run</param>
        </member>
        <member name="M:Development.Materia.Synchronization.WaitToFinish(System.Object[],System.Object)">
            <summary>
            Synchronizes all of the specified sync objects and suspends all preceeding events until all of them are finished.
            </summary>
            <param name="syncs">Synchronization objects to run</param>
            <param name="progressbar">Synchronization progress bar</param>
        </member>
    </members>
</doc>
